{"version":3,"file":"RAFController.js","sources":["../../src/utils/RAFController.ts"],"sourcesContent":["/**\n * requestAnimationFrame 池化控制器\n * 多个动画共享同一个 RAF 循环，提升性能\n */\n\ntype AnimationCallback = (timestamp: number, deltaTime: number) => void;\n\ninterface AnimationTask {\n  id: string;\n  callback: AnimationCallback;\n  priority: number;\n  paused: boolean;\n}\n\n/**\n * RAF 控制器 - 单例模式\n */\nclass RAFController {\n  private static instance: RAFController;\n  private tasks: Map<string, AnimationTask> = new Map();\n  private rafId: number | null = null;\n  private isRunning: boolean = false;\n  private lastTimestamp: number = 0;\n  private frameCount: number = 0;\n  private fps: number = 60;\n  private lastFPSUpdate: number = 0;\n\n  private constructor() {\n    // 页面可见性变化时自动暂停/恢复\n    if (typeof document !== 'undefined') {\n      document.addEventListener('visibilitychange', () => {\n        if (document.hidden) {\n          this.pauseAll();\n        } else {\n          this.resumeAll();\n        }\n      });\n    }\n  }\n\n  /**\n   * 获取单例实例\n   */\n  static getInstance(): RAFController {\n    if (!RAFController.instance) {\n      RAFController.instance = new RAFController();\n    }\n    return RAFController.instance;\n  }\n\n  /**\n   * 注册动画任务\n   */\n  register(id: string, callback: AnimationCallback, priority: number = 0): void {\n    this.tasks.set(id, {\n      id,\n      callback,\n      priority,\n      paused: false,\n    });\n\n    if (!this.isRunning) {\n      this.start();\n    }\n  }\n\n  /**\n   * 注销动画任务\n   */\n  unregister(id: string): void {\n    this.tasks.delete(id);\n\n    // 如果没有任务了，停止 RAF\n    if (this.tasks.size === 0) {\n      this.stop();\n    }\n  }\n\n  /**\n   * 暂停特定任务\n   */\n  pause(id: string): void {\n    const task = this.tasks.get(id);\n    if (task) {\n      task.paused = true;\n    }\n  }\n\n  /**\n   * 恢复特定任务\n   */\n  resume(id: string): void {\n    const task = this.tasks.get(id);\n    if (task) {\n      task.paused = false;\n    }\n\n    if (!this.isRunning && this.tasks.size > 0) {\n      this.start();\n    }\n  }\n\n  /**\n   * 暂停所有任务\n   */\n  pauseAll(): void {\n    this.tasks.forEach(task => {\n      task.paused = true;\n    });\n  }\n\n  /**\n   * 恢复所有任务\n   */\n  resumeAll(): void {\n    this.tasks.forEach(task => {\n      task.paused = false;\n    });\n\n    if (!this.isRunning && this.tasks.size > 0) {\n      this.start();\n    }\n  }\n\n  /**\n   * 检查任务是否存在\n   */\n  has(id: string): boolean {\n    return this.tasks.has(id);\n  }\n\n  /**\n   * 检查任务是否暂停\n   */\n  isPaused(id: string): boolean {\n    return this.tasks.get(id)?.paused || false;\n  }\n\n  /**\n   * 获取当前 FPS\n   */\n  getFPS(): number {\n    return this.fps;\n  }\n\n  /**\n   * 获取活跃任务数\n   */\n  getActiveTaskCount(): number {\n    return Array.from(this.tasks.values()).filter(task => !task.paused).length;\n  }\n\n  /**\n   * 获取总任务数\n   */\n  getTotalTaskCount(): number {\n    return this.tasks.size;\n  }\n\n  /**\n   * 启动 RAF 循环\n   */\n  private start(): void {\n    if (this.isRunning) return;\n\n    this.isRunning = true;\n    this.lastTimestamp = performance.now();\n    this.lastFPSUpdate = this.lastTimestamp;\n    this.frameCount = 0;\n    this.tick(this.lastTimestamp);\n  }\n\n  /**\n   * 停止 RAF 循环\n   */\n  private stop(): void {\n    if (this.rafId !== null) {\n      cancelAnimationFrame(this.rafId);\n      this.rafId = null;\n    }\n    this.isRunning = false;\n  }\n\n  /**\n   * RAF 循环主函数\n   */\n  private tick = (timestamp: number): void => {\n    if (!this.isRunning) return;\n\n    const deltaTime = timestamp - this.lastTimestamp;\n    this.lastTimestamp = timestamp;\n\n    // 计算 FPS\n    this.frameCount++;\n    const fpsElapsed = timestamp - this.lastFPSUpdate;\n    if (fpsElapsed >= 1000) {\n      this.fps = Math.round((this.frameCount * 1000) / fpsElapsed);\n      this.frameCount = 0;\n      this.lastFPSUpdate = timestamp;\n    }\n\n    // 按优先级排序任务\n    const sortedTasks = Array.from(this.tasks.values())\n      .filter(task => !task.paused)\n      .sort((a, b) => b.priority - a.priority);\n\n    // 执行所有活跃任务\n    for (const task of sortedTasks) {\n      try {\n        task.callback(timestamp, deltaTime);\n      } catch (error) {\n        console.error(`Error in animation task \"${task.id}\":`, error);\n      }\n    }\n\n    // 继续下一帧\n    this.rafId = requestAnimationFrame(this.tick);\n  };\n\n  /**\n   * 清除所有任务\n   */\n  clear(): void {\n    this.tasks.clear();\n    this.stop();\n  }\n}\n\n// 导出单例实例\nexport const rafController = RAFController.getInstance();\n\n/**\n * 便捷的动画包装器\n */\nexport class AnimationWrapper {\n  private id: string;\n  private priority: number;\n\n  constructor(id: string, callback: AnimationCallback, priority: number = 0) {\n    this.id = id;\n    this.priority = priority;\n    rafController.register(id, callback, priority);\n  }\n\n  /**\n   * 暂停动画\n   */\n  pause(): void {\n    rafController.pause(this.id);\n  }\n\n  /**\n   * 恢复动画\n   */\n  resume(): void {\n    rafController.resume(this.id);\n  }\n\n  /**\n   * 检查是否暂停\n   */\n  isPaused(): boolean {\n    return rafController.isPaused(this.id);\n  }\n\n  /**\n   * 销毁动画\n   */\n  destroy(): void {\n    rafController.unregister(this.id);\n  }\n\n  /**\n   * 切换暂停状态\n   */\n  toggle(): void {\n    if (this.isPaused()) {\n      this.resume();\n    } else {\n      this.pause();\n    }\n  }\n}\n\n/**\n * 批量 DOM 操作优化器\n */\nexport class DOMBatcher {\n  private readCallbacks: Array<() => void> = [];\n  private writeCallbacks: Array<() => void> = [];\n  private scheduled: boolean = false;\n\n  /**\n   * 添加读操作（不会导致重排）\n   */\n  read(callback: () => void): void {\n    this.readCallbacks.push(callback);\n    this.schedule();\n  }\n\n  /**\n   * 添加写操作（可能导致重排）\n   */\n  write(callback: () => void): void {\n    this.writeCallbacks.push(callback);\n    this.schedule();\n  }\n\n  /**\n   * 调度批处理\n   */\n  private schedule(): void {\n    if (this.scheduled) return;\n\n    this.scheduled = true;\n    requestAnimationFrame(() => {\n      this.flush();\n    });\n  }\n\n  /**\n   * 执行批处理\n   */\n  private flush(): void {\n    // 先执行所有读操作\n    const reads = this.readCallbacks.slice();\n    this.readCallbacks = [];\n\n    for (const read of reads) {\n      try {\n        read();\n      } catch (error) {\n        console.error('Error in DOM read operation:', error);\n      }\n    }\n\n    // 再执行所有写操作\n    const writes = this.writeCallbacks.slice();\n    this.writeCallbacks = [];\n\n    for (const write of writes) {\n      try {\n        write();\n      } catch (error) {\n        console.error('Error in DOM write operation:', error);\n      }\n    }\n\n    this.scheduled = false;\n\n    // 如果还有待处理的操作，继续调度\n    if (this.readCallbacks.length > 0 || this.writeCallbacks.length > 0) {\n      this.schedule();\n    }\n  }\n\n  /**\n   * 清空所有待处理操作\n   */\n  clear(): void {\n    this.readCallbacks = [];\n    this.writeCallbacks = [];\n    this.scheduled = false;\n  }\n}\n\n// 导出单例实例\nexport const domBatcher = new DOMBatcher();\n\n\n\n\n"],"names":[],"mappings":"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"}