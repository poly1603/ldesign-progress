{"version":3,"file":"DashboardProgress.cjs","sources":["../../src/components/DashboardProgress.ts"],"sourcesContent":["import { DashboardProgressOptions } from '../types';\r\nimport { SemiCircleProgress } from './SemiCircleProgress';\r\nimport { createSVGElement, degToRad, clamp } from '../utils';\r\n\r\n/**\r\n * 仪表盘进度条\r\n */\r\nexport class DashboardProgress extends SemiCircleProgress {\r\n  private pointer?: SVGElement;\r\n  private colorRangeElements: SVGElement[] = [];\r\n\r\n  protected getDefaultOptions(): Partial<DashboardProgressOptions> {\r\n    return {\r\n      ...super.getDefaultOptions(),\r\n      showPointer: true,\r\n      colorRanges: undefined,\r\n      warningZones: undefined,\r\n      angleRange: 270,\r\n      startAngle: -225,\r\n      showScale: true,\r\n      scaleCount: 10,\r\n    };\r\n  }\r\n\r\n  protected render(): void {\r\n    // 调用父类渲染\r\n    super.render();\r\n\r\n    // 渲染颜色范围\r\n    const colorRanges = this.config.get('colorRanges');\r\n    if (colorRanges && colorRanges.length > 0) {\r\n      this.renderColorRanges(colorRanges);\r\n    }\r\n\r\n    // 渲染警告区域\r\n    const warningZones = this.config.get('warningZones');\r\n    if (warningZones && warningZones.length > 0) {\r\n      this.renderWarningZones(warningZones);\r\n    }\r\n\r\n    // 创建指针\r\n    if (this.config.get('showPointer')) {\r\n      this.renderPointer();\r\n    }\r\n\r\n    // 更新进度\r\n    this.updateProgress(this.currentValue);\r\n  }\r\n\r\n  protected renderColorRanges(ranges: Array<{ min: number; max: number; color: string }>): void {\r\n    const strokeWidth = this.config.get('strokeWidth') ?? 6;\r\n    const center = (this.radius + strokeWidth) * 2 / 2;\r\n    const angleRange = this.config.get('angleRange') ?? 270;\r\n    const startAngle = this.config.get('startAngle') ?? -225;\r\n    const max = this.config.get('max') ?? 100;\r\n\r\n    // 清除旧的颜色范围元素\r\n    this.colorRangeElements.forEach(el => el.remove());\r\n    this.colorRangeElements = [];\r\n\r\n    ranges.forEach(range => {\r\n      const startPercent = clamp(range.min / max, 0, 1);\r\n      const endPercent = clamp(range.max / max, 0, 1);\r\n      \r\n      const startDeg = startAngle + angleRange * startPercent;\r\n      const endDeg = startAngle + angleRange * endPercent;\r\n      const sweepAngle = endDeg - startDeg;\r\n\r\n      const startRad = degToRad(startDeg);\r\n      const endRad = degToRad(endDeg);\r\n\r\n      const innerRadius = this.radius - strokeWidth;\r\n      const outerRadius = this.radius;\r\n\r\n      // 创建路径\r\n      const path = createSVGElement('path', {\r\n        fill: range.color,\r\n        opacity: '0.3',\r\n        class: 'ld-progress-dashboard__range',\r\n      });\r\n\r\n      const x1 = center + innerRadius * Math.cos(startRad);\r\n      const y1 = center + innerRadius * Math.sin(startRad);\r\n      const x2 = center + outerRadius * Math.cos(startRad);\r\n      const y2 = center + outerRadius * Math.sin(startRad);\r\n      const x3 = center + outerRadius * Math.cos(endRad);\r\n      const y3 = center + outerRadius * Math.sin(endRad);\r\n      const x4 = center + innerRadius * Math.cos(endRad);\r\n      const y4 = center + innerRadius * Math.sin(endRad);\r\n\r\n      const largeArc = sweepAngle > 180 ? 1 : 0;\r\n\r\n      const d = [\r\n        `M ${x1} ${y1}`,\r\n        `L ${x2} ${y2}`,\r\n        `A ${outerRadius} ${outerRadius} 0 ${largeArc} 1 ${x3} ${y3}`,\r\n        `L ${x4} ${y4}`,\r\n        `A ${innerRadius} ${innerRadius} 0 ${largeArc} 0 ${x1} ${y1}`,\r\n        'Z'\r\n      ].join(' ');\r\n\r\n      path.setAttribute('d', d);\r\n      this.svg.insertBefore(path, this.trackCircle);\r\n      this.colorRangeElements.push(path);\r\n    });\r\n  }\r\n\r\n  protected renderWarningZones(zones: Array<{ min: number; max: number; color?: string }>): void {\r\n    const defaultColor = '#f56c6c';\r\n    zones.forEach(zone => {\r\n      this.colorRangeElements.push(...this.colorRangeElements);\r\n    });\r\n  }\r\n\r\n  protected renderPointer(): void {\r\n    const strokeWidth = this.config.get('strokeWidth') ?? 6;\r\n    const center = (this.radius + strokeWidth) * 2 / 2;\r\n    const pointerLength = this.radius - strokeWidth / 2;\r\n\r\n    // 创建指针组\r\n    const pointerGroup = createSVGElement('g', {\r\n      class: 'ld-progress-dashboard__pointer',\r\n    });\r\n\r\n    // 创建指针线\r\n    this.pointer = createSVGElement('line', {\r\n      x1: center,\r\n      y1: center,\r\n      x2: center,\r\n      y2: center - pointerLength,\r\n      stroke: '#f56c6c',\r\n      'stroke-width': 2,\r\n      'stroke-linecap': 'round',\r\n    });\r\n\r\n    // 创建中心圆点\r\n    const centerDot = createSVGElement('circle', {\r\n      cx: center,\r\n      cy: center,\r\n      r: 4,\r\n      fill: '#f56c6c',\r\n    });\r\n\r\n    pointerGroup.appendChild(this.pointer);\r\n    pointerGroup.appendChild(centerDot);\r\n    this.svg.appendChild(pointerGroup);\r\n\r\n    // 设置旋转中心\r\n    pointerGroup.style.transformOrigin = `${center}px ${center}px`;\r\n  }\r\n\r\n  protected updateProgress(value: number): void {\r\n    // 调用父类更新\r\n    super.updateProgress(value);\r\n\r\n    // 更新指针旋转\r\n    if (this.pointer) {\r\n      const percentage = this.config.getPercentage(value);\r\n      const angleRange = this.config.get('angleRange') ?? 270;\r\n      const startAngle = this.config.get('startAngle') ?? -225;\r\n      const angle = startAngle + (angleRange * percentage) / 100;\r\n\r\n      const pointerGroup = this.pointer.parentElement;\r\n      if (pointerGroup) {\r\n        pointerGroup.style.transform = `rotate(${angle}deg)`;\r\n      }\r\n    }\r\n\r\n    // 根据颜色范围改变进度条颜色\r\n    const colorRanges = this.config.get('colorRanges');\r\n    if (colorRanges && colorRanges.length > 0) {\r\n      const currentRange = colorRanges.find(\r\n        range => value >= range.min && value <= range.max\r\n      );\r\n      if (currentRange && this.progressCircle) {\r\n        this.progressCircle.setAttribute('stroke', currentRange.color);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置是否显示指针\r\n   */\r\n  setShowPointer(show: boolean): void {\r\n    this.config.set('showPointer', show);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * 设置颜色范围\r\n   */\r\n  setColorRanges(ranges: Array<{ min: number; max: number; color: string }>): void {\r\n    this.config.set('colorRanges', ranges);\r\n    this.render();\r\n  }\r\n}\r\n\r\n\r\n"],"names":["SemiCircleProgress","clamp","degToRad","createSVGElement"],"mappings":"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"}