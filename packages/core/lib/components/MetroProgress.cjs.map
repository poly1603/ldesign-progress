{"version":3,"file":"MetroProgress.cjs","sources":["../../src/components/MetroProgress.ts"],"sourcesContent":["import { MetroProgressOptions, MetroStation } from '../types';\nimport { ProgressBase } from '../base';\nimport { createElement, createSVGElement, createFragment } from '../utils';\n\n/**\n * MetroProgress - 地铁线路进度条\n */\nexport class MetroProgress extends ProgressBase<MetroProgressOptions> {\n  private wrapper!: HTMLElement;\n  private svg!: SVGSVGElement;\n  private line!: SVGLineElement;\n  private progressLine!: SVGLineElement;\n  private stations: HTMLElement[] = [];\n\n  protected getDefaultOptions(): Partial<MetroProgressOptions> {\n    return {\n      ...super.getDefaultOptions(),\n      layout: 'horizontal',\n      stations: [],\n      stationSize: 16,\n      lineColor: '#409eff',\n      spacing: 80,\n      showStationNames: true,\n    };\n  }\n\n  protected render(): void {\n    this.container.innerHTML = '';\n\n    const layout = this.config.get('layout') ?? 'horizontal';\n    const stations = this.config.get('stations') || this.getDefaultStations();\n    const spacing = this.config.get('spacing') ?? 80;\n\n    // 计算尺寸\n    const totalLength = (stations.length - 1) * spacing + 40;\n    const width = layout === 'horizontal' ? totalLength : 100;\n    const height = layout === 'horizontal' ? 100 : totalLength;\n\n    // 创建包装器\n    this.wrapper = createElement('div', `ld-progress-metro ld-progress-metro--${layout}`, this.container);\n    this.wrapper.style.position = 'relative';\n    this.wrapper.style.width = `${width}px`;\n    this.wrapper.style.height = `${height}px`;\n\n    const className = this.config.get('className');\n    if (className) {\n      this.wrapper.classList.add(className);\n    }\n\n    // 创建 SVG\n    this.svg = createSVGElement('svg', {\n      width,\n      height,\n      class: 'ld-progress-metro__svg',\n    }) as SVGSVGElement;\n    this.wrapper.appendChild(this.svg);\n\n    // 绘制线路\n    this.drawLine(stations, spacing, layout);\n\n    // 绘制站点\n    this.drawStations(stations, spacing, layout);\n\n    this.updateProgress(this.currentValue);\n  }\n\n  /**\n   * 获取默认站点\n   */\n  private getDefaultStations(): MetroStation[] {\n    return [\n      { name: '起点', status: 'completed' },\n      { name: '站点1', status: 'active' },\n      { name: '站点2', status: 'pending' },\n      { name: '终点', status: 'pending' },\n    ];\n  }\n\n  /**\n   * 绘制线路\n   */\n  private drawLine(stations: MetroStation[], spacing: number, layout: string): void {\n    const stationSize = this.config.get('stationSize') ?? 16;\n    const lineColor = this.config.get('lineColor') || '#409eff';\n    const offset = 20;\n\n    if (layout === 'horizontal') {\n      const y = 50;\n      const x1 = offset;\n      const x2 = offset + (stations.length - 1) * spacing;\n\n      // 背景线\n      this.line = createSVGElement('line', {\n        x1,\n        y1: y,\n        x2,\n        y2: y,\n        stroke: '#e4e7ed',\n        'stroke-width': 4,\n        class: 'ld-progress-metro__line',\n      }) as SVGLineElement;\n      this.svg.appendChild(this.line);\n\n      // 进度线\n      this.progressLine = createSVGElement('line', {\n        x1,\n        y1: y,\n        x2: x1,\n        y2: y,\n        stroke: lineColor,\n        'stroke-width': 4,\n        class: 'ld-progress-metro__progress-line',\n      }) as SVGLineElement;\n      this.svg.appendChild(this.progressLine);\n    } else {\n      const x = 50;\n      const y1 = offset;\n      const y2 = offset + (stations.length - 1) * spacing;\n\n      // 背景线\n      this.line = createSVGElement('line', {\n        x1: x,\n        y1,\n        x2: x,\n        y2,\n        stroke: '#e4e7ed',\n        'stroke-width': 4,\n        class: 'ld-progress-metro__line',\n      }) as SVGLineElement;\n      this.svg.appendChild(this.line);\n\n      // 进度线\n      this.progressLine = createSVGElement('line', {\n        x1: x,\n        y1,\n        x2: x,\n        y2: y1,\n        stroke: lineColor,\n        'stroke-width': 4,\n        class: 'ld-progress-metro__progress-line',\n      }) as SVGLineElement;\n      this.svg.appendChild(this.progressLine);\n    }\n  }\n\n  /**\n   * 绘制站点\n   */\n  private drawStations(stations: MetroStation[], spacing: number, layout: string): void {\n    const stationSize = this.config.get('stationSize') ?? 16;\n    const showNames = this.config.get('showStationNames') ?? true;\n    const offset = 20;\n\n    this.stations = [];\n    const stationElements: HTMLElement[] = [];\n\n    stations.forEach((station, index) => {\n      const x = layout === 'horizontal' ? offset + index * spacing : 50;\n      const y = layout === 'horizontal' ? 50 : offset + index * spacing;\n\n      // 站点标记\n      const circle = createSVGElement('circle', {\n        cx: x,\n        cy: y,\n        r: stationSize / 2,\n        fill: 'white',\n        stroke: '#e4e7ed',\n        'stroke-width': 3,\n        class: 'ld-progress-metro__station',\n      });\n      this.svg.appendChild(circle);\n\n      // 站点名称\n      if (showNames && station.name) {\n        const label = createElement('div', 'ld-progress-metro__label');\n        label.textContent = station.name;\n        label.style.position = 'absolute';\n        label.style.fontSize = '12px';\n        label.style.color = '#606266';\n        label.style.whiteSpace = 'nowrap';\n\n        if (layout === 'horizontal') {\n          label.style.left = `${x}px`;\n          label.style.top = '70px';\n          label.style.transform = 'translateX(-50%)';\n        } else {\n          label.style.left = '70px';\n          label.style.top = `${y}px`;\n          label.style.transform = 'translateY(-50%)';\n        }\n\n        stationElements.push(label);\n        this.stations.push(label);\n      }\n    });\n\n    // 批量添加站点名称\n    if (stationElements.length > 0) {\n      const fragment = createFragment(stationElements);\n      this.wrapper.appendChild(fragment);\n    }\n  }\n\n  protected updateProgress(value: number): void {\n    const percentage = this.config.getPercentage(value);\n    const stations = this.config.get('stations') || this.getDefaultStations();\n    const spacing = this.config.get('spacing') ?? 80;\n    const layout = this.config.get('layout') ?? 'horizontal';\n    const offset = 20;\n    const lineColor = this.config.get('lineColor') || '#409eff';\n\n    // 更新进度线\n    const totalLength = (stations.length - 1) * spacing;\n    const progressLength = (totalLength * percentage) / 100;\n\n    if (layout === 'horizontal') {\n      this.progressLine.setAttribute('x2', String(offset + progressLength));\n    } else {\n      this.progressLine.setAttribute('y2', String(offset + progressLength));\n    }\n\n    // 更新站点状态\n    const reachedStations = Math.floor((stations.length * percentage) / 100);\n\n    const circles = this.svg.querySelectorAll('.ld-progress-metro__station');\n    circles.forEach((circle, index) => {\n      if (index < reachedStations) {\n        circle.setAttribute('fill', lineColor);\n        circle.setAttribute('stroke', lineColor);\n      } else if (index === reachedStations) {\n        circle.setAttribute('fill', 'white');\n        circle.setAttribute('stroke', lineColor);\n      } else {\n        circle.setAttribute('fill', 'white');\n        circle.setAttribute('stroke', '#e4e7ed');\n      }\n    });\n  }\n\n  /**\n   * 生成螺旋路径\n   */\n  private generateSpiralPath(\n    cx: number,\n    cy: number,\n    innerRadius: number,\n    outerRadius: number,\n    turns: number,\n    clockwise: boolean\n  ): string {\n    const points = turns * 50;\n    const radiusStep = (outerRadius - innerRadius) / points;\n    const angleStep = (turns * 2 * Math.PI) / points;\n    const direction = clockwise ? 1 : -1;\n\n    let path = '';\n\n    for (let i = 0; i <= points; i++) {\n      const radius = innerRadius + i * radiusStep;\n      const angle = i * angleStep * direction;\n      const x = cx + radius * Math.cos(angle);\n      const y = cy + radius * Math.sin(angle);\n\n      if (i === 0) {\n        path = `M ${x} ${y}`;\n      } else {\n        path += ` L ${x} ${y}`;\n      }\n    }\n\n    return path;\n  }\n\n  /**\n   * 设置站点\n   */\n  setStations(stations: MetroStation[]): void {\n    this.config.set('stations', stations);\n    this.render();\n  }\n}\n\n\n\n"],"names":["ProgressBase","createElement","createSVGElement","createFragment"],"mappings":"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"}