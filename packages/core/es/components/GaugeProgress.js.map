{"version":3,"file":"GaugeProgress.js","sources":["../../src/components/GaugeProgress.ts"],"sourcesContent":["import { GaugeProgressOptions } from '../types';\r\nimport { DashboardProgress } from './DashboardProgress';\r\nimport { createSVGElement, degToRad } from '../utils';\r\n\r\n/**\r\n * 高级仪表盘进度条\r\n */\r\nexport class GaugeProgress extends DashboardProgress {\r\n  private numberElements: SVGElement[] = [];\r\n\r\n  protected getDefaultOptions(): Partial<GaugeProgressOptions> {\r\n    return {\r\n      ...super.getDefaultOptions(),\r\n      showNumbers: true,\r\n      tickCount: 10,\r\n      showMinorTicks: true,\r\n      minorTickCount: 5,\r\n      needleType: 'arrow',\r\n    };\r\n  }\r\n\r\n  protected render(): void {\r\n    // 调用父类渲染\r\n    super.render();\r\n\r\n    // 添加数字刻度\r\n    if (this.config.get('showNumbers')) {\r\n      this.renderNumbers();\r\n    }\r\n\r\n    // 添加小刻度\r\n    if (this.config.get('showMinorTicks')) {\r\n      this.renderMinorTicks();\r\n    }\r\n\r\n    // 更新指针样式\r\n    this.updateNeedleStyle();\r\n  }\r\n\r\n  protected renderNumbers(): void {\r\n    const tickCount = this.config.get('tickCount') ?? 10;\r\n    const angleRange = this.config.get('angleRange') ?? 270;\r\n    const startAngle = this.config.get('startAngle') ?? -225;\r\n    const strokeWidth = this.config.get('strokeWidth') ?? 6;\r\n    const center = (this.radius + strokeWidth) * 2 / 2;\r\n    const min = this.config.get('min') ?? 0;\r\n    const max = this.config.get('max') ?? 100;\r\n    const numberFormat = this.config.get('numberFormat');\r\n\r\n    // 清除旧数字\r\n    this.numberElements.forEach(el => el.remove());\r\n    this.numberElements = [];\r\n\r\n    const numberRadius = this.radius + 20;\r\n\r\n    for (let i = 0; i <= tickCount; i++) {\r\n      const angle = startAngle + (angleRange / tickCount) * i;\r\n      const angleRad = degToRad(angle);\r\n\r\n      const x = center + numberRadius * Math.cos(angleRad);\r\n      const y = center + numberRadius * Math.sin(angleRad);\r\n\r\n      const value = min + (max - min) * (i / tickCount);\r\n      const displayValue = numberFormat ? numberFormat(value) : Math.round(value).toString();\r\n\r\n      const text = createSVGElement('text', {\r\n        x,\r\n        y,\r\n        'text-anchor': 'middle',\r\n        'dominant-baseline': 'middle',\r\n        class: 'ld-progress-gauge__number',\r\n        fill: '#606266',\r\n        'font-size': '12',\r\n        'font-weight': 'bold',\r\n      });\r\n      text.textContent = displayValue;\r\n\r\n      this.svg.appendChild(text);\r\n      this.numberElements.push(text);\r\n    }\r\n  }\r\n\r\n  protected renderMinorTicks(): void {\r\n    const tickCount = this.config.get('tickCount') ?? 10;\r\n    const minorTickCount = this.config.get('minorTickCount') ?? 5;\r\n    const angleRange = this.config.get('angleRange') ?? 270;\r\n    const startAngle = this.config.get('startAngle') ?? -225;\r\n    const strokeWidth = this.config.get('strokeWidth') ?? 6;\r\n    const center = (this.radius + strokeWidth) * 2 / 2;\r\n\r\n    const totalSegments = tickCount * minorTickCount;\r\n    const angleStep = angleRange / totalSegments;\r\n\r\n    for (let i = 0; i <= totalSegments; i++) {\r\n      // 跳过主刻度位置\r\n      if (i % minorTickCount === 0) continue;\r\n\r\n      const angle = startAngle + angleStep * i;\r\n      const angleRad = degToRad(angle);\r\n\r\n      const innerRadius = this.radius - strokeWidth / 2 - 2;\r\n      const outerRadius = this.radius - strokeWidth / 2 + 3;\r\n\r\n      const x1 = center + innerRadius * Math.cos(angleRad);\r\n      const y1 = center + innerRadius * Math.sin(angleRad);\r\n      const x2 = center + outerRadius * Math.cos(angleRad);\r\n      const y2 = center + outerRadius * Math.sin(angleRad);\r\n\r\n      const line = createSVGElement('line', {\r\n        x1,\r\n        y1,\r\n        x2,\r\n        y2,\r\n        stroke: '#c0c4cc',\r\n        'stroke-width': 0.5,\r\n        class: 'ld-progress-gauge__minor-tick',\r\n      });\r\n\r\n      this.svg.appendChild(line);\r\n    }\r\n  }\r\n\r\n  protected updateNeedleStyle(): void {\r\n    if (!this.pointer) return;\r\n\r\n    const needleType = this.config.get('needleType') ?? 'arrow';\r\n    const strokeWidth = this.config.get('strokeWidth') ?? 6;\r\n    const center = (this.radius + strokeWidth) * 2 / 2;\r\n    const pointerLength = this.radius - strokeWidth / 2;\r\n\r\n    // 移除旧指针\r\n    const pointerGroup = this.pointer.parentElement;\r\n    if (pointerGroup) {\r\n      pointerGroup.innerHTML = '';\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    // 根据类型创建新指针\r\n    switch (needleType) {\r\n      case 'arrow':\r\n        // 箭头型指针\r\n        const arrowPath = createSVGElement('path', {\r\n          d: `M ${center} ${center - pointerLength} \r\n              L ${center - 4} ${center - 5}\r\n              L ${center} ${center}\r\n              L ${center + 4} ${center - 5} Z`,\r\n          fill: '#f56c6c',\r\n          stroke: '#f56c6c',\r\n          'stroke-width': 1,\r\n        });\r\n        pointerGroup?.appendChild(arrowPath);\r\n        break;\r\n\r\n      case 'triangle':\r\n        // 三角形指针\r\n        const trianglePath = createSVGElement('path', {\r\n          d: `M ${center} ${center - pointerLength}\r\n              L ${center - 6} ${center}\r\n              L ${center + 6} ${center} Z`,\r\n          fill: '#f56c6c',\r\n        });\r\n        pointerGroup?.appendChild(trianglePath);\r\n        break;\r\n\r\n      case 'line':\r\n      default:\r\n        // 线型指针\r\n        this.pointer = createSVGElement('line', {\r\n          x1: center,\r\n          y1: center,\r\n          x2: center,\r\n          y2: center - pointerLength,\r\n          stroke: '#f56c6c',\r\n          'stroke-width': 3,\r\n          'stroke-linecap': 'round',\r\n        });\r\n        pointerGroup?.appendChild(this.pointer);\r\n        break;\r\n    }\r\n\r\n    // 添加中心圆点\r\n    const centerDot = createSVGElement('circle', {\r\n      cx: center,\r\n      cy: center,\r\n      r: 6,\r\n      fill: '#f56c6c',\r\n      stroke: '#fff',\r\n      'stroke-width': 2,\r\n    });\r\n    pointerGroup?.appendChild(centerDot);\r\n  }\r\n\r\n  /**\r\n   * 设置指针类型\r\n   */\r\n  setNeedleType(type: 'arrow' | 'line' | 'triangle'): void {\r\n    this.config.set('needleType', type);\r\n    this.updateNeedleStyle();\r\n  }\r\n\r\n  /**\r\n   * 设置是否显示数字\r\n   */\r\n  setShowNumbers(show: boolean): void {\r\n    this.config.set('showNumbers', show);\r\n    if (show) {\r\n      this.renderNumbers();\r\n    } else {\r\n      this.numberElements.forEach(el => el.remove());\r\n      this.numberElements = [];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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"}