{"version":3,"file":"ProgressSynchronizer.js","sources":["../../src/utils/ProgressSynchronizer.ts"],"sourcesContent":["/**\n * 进度同步器 - 多个进度条同步更新\n */\n\nexport type ProgressInstance = {\n  setValue: (value: number, animated?: boolean) => void;\n  getValue: () => number;\n  [key: string]: any;\n};\n\nexport interface SyncOptions {\n  /** 同步模式 */\n  mode?: 'master-slave' | 'average' | 'max' | 'min';\n  /** 同步延迟（毫秒） */\n  delay?: number;\n  /** 是否启用动画 */\n  animated?: boolean;\n  /** 值转换函数 */\n  transform?: (value: number, instanceId: string) => number;\n}\n\n/**\n * 进度同步器类\n */\nexport class ProgressSynchronizer {\n  private instances: Map<string, ProgressInstance> = new Map();\n  private options: SyncOptions;\n  private isSyncing: boolean = false;\n  private syncTimeout?: any;\n\n  constructor(options: SyncOptions = {}) {\n    this.options = {\n      mode: 'master-slave',\n      delay: 0,\n      animated: true,\n      ...options,\n    };\n  }\n\n  /**\n   * 添加进度条实例\n   */\n  add(id: string, instance: ProgressInstance): void {\n    this.instances.set(id, instance);\n  }\n\n  /**\n   * 移除进度条实例\n   */\n  remove(id: string): void {\n    this.instances.delete(id);\n  }\n\n  /**\n   * 同步所有实例到指定值\n   */\n  syncTo(value: number, excludeId?: string): void {\n    if (this.isSyncing) return;\n\n    this.isSyncing = true;\n\n    const sync = () => {\n      this.instances.forEach((instance, id) => {\n        if (id === excludeId) return;\n\n        // 应用转换函数\n        const transformedValue = this.options.transform\n          ? this.options.transform(value, id)\n          : value;\n\n        instance.setValue(transformedValue, this.options.animated);\n      });\n\n      this.isSyncing = false;\n    };\n\n    if (this.options.delay && this.options.delay > 0) {\n      if (this.syncTimeout) {\n        clearTimeout(this.syncTimeout);\n      }\n      this.syncTimeout = setTimeout(sync, this.options.delay);\n    } else {\n      sync();\n    }\n  }\n\n  /**\n   * 根据模式同步\n   */\n  sync(sourceId?: string): void {\n    if (this.instances.size === 0) return;\n\n    const mode = this.options.mode || 'master-slave';\n\n    switch (mode) {\n      case 'master-slave':\n        this.syncMasterSlave(sourceId);\n        break;\n      case 'average':\n        this.syncAverage();\n        break;\n      case 'max':\n        this.syncMax();\n        break;\n      case 'min':\n        this.syncMin();\n        break;\n    }\n  }\n\n  /**\n   * 主从模式同步\n   */\n  private syncMasterSlave(masterId?: string): void {\n    if (!masterId) {\n      // 使用第一个实例作为主实例\n      masterId = Array.from(this.instances.keys())[0];\n    }\n\n    const master = this.instances.get(masterId);\n    if (!master) return;\n\n    const masterValue = master.getValue();\n    this.syncTo(masterValue, masterId);\n  }\n\n  /**\n   * 平均值模式同步\n   */\n  private syncAverage(): void {\n    const values: number[] = [];\n    this.instances.forEach(instance => {\n      values.push(instance.getValue());\n    });\n\n    if (values.length === 0) return;\n\n    const average = values.reduce((sum, v) => sum + v, 0) / values.length;\n    this.syncTo(average);\n  }\n\n  /**\n   * 最大值模式同步\n   */\n  private syncMax(): void {\n    let maxValue = -Infinity;\n    this.instances.forEach(instance => {\n      const value = instance.getValue();\n      if (value > maxValue) {\n        maxValue = value;\n      }\n    });\n\n    if (isFinite(maxValue)) {\n      this.syncTo(maxValue);\n    }\n  }\n\n  /**\n   * 最小值模式同步\n   */\n  private syncMin(): void {\n    let minValue = Infinity;\n    this.instances.forEach(instance => {\n      const value = instance.getValue();\n      if (value < minValue) {\n        minValue = value;\n      }\n    });\n\n    if (isFinite(minValue)) {\n      this.syncTo(minValue);\n    }\n  }\n\n  /**\n   * 设置同步模式\n   */\n  setMode(mode: 'master-slave' | 'average' | 'max' | 'min'): void {\n    this.options.mode = mode;\n  }\n\n  /**\n   * 设置同步延迟\n   */\n  setDelay(delay: number): void {\n    this.options.delay = delay;\n  }\n\n  /**\n   * 设置值转换函数\n   */\n  setTransform(transform: (value: number, instanceId: string) => number): void {\n    this.options.transform = transform;\n  }\n\n  /**\n   * 启用/禁用动画\n   */\n  setAnimated(animated: boolean): void {\n    this.options.animated = animated;\n  }\n\n  /**\n   * 获取所有实例 ID\n   */\n  getInstanceIds(): string[] {\n    return Array.from(this.instances.keys());\n  }\n\n  /**\n   * 获取实例数量\n   */\n  getInstanceCount(): number {\n    return this.instances.size;\n  }\n\n  /**\n   * 清空所有实例\n   */\n  clear(): void {\n    if (this.syncTimeout) {\n      clearTimeout(this.syncTimeout);\n    }\n    this.instances.clear();\n  }\n\n  /**\n   * 检查是否包含实例\n   */\n  has(id: string): boolean {\n    return this.instances.has(id);\n  }\n\n  /**\n   * 获取所有实例的当前值\n   */\n  getAllValues(): Map<string, number> {\n    const values = new Map<string, number>();\n    this.instances.forEach((instance, id) => {\n      values.set(id, instance.getValue());\n    });\n    return values;\n  }\n}\n\n/**\n * 链式进度 - 一个完成后触发下一个\n */\nexport class ProgressChain {\n  private chain: Array<{\n    id: string;\n    instance: ProgressInstance;\n    targetValue: number;\n  }> = [];\n  private currentIndex: number = 0;\n  private isRunning: boolean = false;\n  private onComplete?: () => void;\n  private onStepComplete?: (index: number, id: string) => void;\n\n  /**\n   * 添加到链中\n   */\n  add(id: string, instance: ProgressInstance, targetValue: number = 100): this {\n    this.chain.push({ id, instance, targetValue });\n    return this;\n  }\n\n  /**\n   * 开始执行链\n   */\n  start(onComplete?: () => void, onStepComplete?: (index: number, id: string) => void): void {\n    if (this.isRunning) return;\n    if (this.chain.length === 0) return;\n\n    this.isRunning = true;\n    this.currentIndex = 0;\n    this.onComplete = onComplete;\n    this.onStepComplete = onStepComplete;\n\n    this.executeNext();\n  }\n\n  /**\n   * 执行下一个\n   */\n  private executeNext(): void {\n    if (this.currentIndex >= this.chain.length) {\n      this.isRunning = false;\n      if (this.onComplete) {\n        this.onComplete();\n      }\n      return;\n    }\n\n    const { id, instance, targetValue } = this.chain[this.currentIndex];\n\n    // 监听完成事件\n    const originalOnComplete = (instance as any).config?.get('onComplete');\n\n    const handleComplete = () => {\n      if (this.onStepComplete) {\n        this.onStepComplete(this.currentIndex, id);\n      }\n\n      // 恢复原来的回调\n      if (originalOnComplete) {\n        (instance as any).config?.set('onComplete', originalOnComplete);\n      }\n\n      this.currentIndex++;\n      this.executeNext();\n    };\n\n    // 设置临时完成回调\n    if ((instance as any).config) {\n      (instance as any).config.set('onComplete', handleComplete);\n    }\n\n    // 启动进度\n    instance.setValue(targetValue);\n  }\n\n  /**\n   * 停止执行\n   */\n  stop(): void {\n    this.isRunning = false;\n  }\n\n  /**\n   * 重置\n   */\n  reset(): void {\n    this.stop();\n    this.currentIndex = 0;\n    this.chain.forEach(({ instance }) => {\n      instance.setValue(0, false);\n    });\n  }\n\n  /**\n   * 清空链\n   */\n  clear(): void {\n    this.stop();\n    this.chain = [];\n    this.currentIndex = 0;\n  }\n\n  /**\n   * 获取当前进度\n   */\n  getCurrentIndex(): number {\n    return this.currentIndex;\n  }\n\n  /**\n   * 检查是否正在运行\n   */\n  isChainRunning(): boolean {\n    return this.isRunning;\n  }\n\n  /**\n   * 获取链长度\n   */\n  getLength(): number {\n    return this.chain.length;\n  }\n}\n\n/**\n * 进度组 - 管理一组相关的进度条\n */\nexport class ProgressGroup {\n  private group: Map<string, ProgressInstance> = new Map();\n\n  /**\n   * 添加到组\n   */\n  add(id: string, instance: ProgressInstance): void {\n    this.group.set(id, instance);\n  }\n\n  /**\n   * 移除\n   */\n  remove(id: string): void {\n    this.group.delete(id);\n  }\n\n  /**\n   * 全部设置为相同值\n   */\n  setAll(value: number, animated: boolean = true): void {\n    this.group.forEach(instance => {\n      instance.setValue(value, animated);\n    });\n  }\n\n  /**\n   * 全部增加\n   */\n  incrementAll(delta: number): void {\n    this.group.forEach(instance => {\n      const currentValue = instance.getValue();\n      instance.setValue(currentValue + delta);\n    });\n  }\n\n  /**\n   * 全部重置\n   */\n  resetAll(): void {\n    this.group.forEach(instance => {\n      if (typeof (instance as any).reset === 'function') {\n        (instance as any).reset();\n      } else {\n        instance.setValue(0, false);\n      }\n    });\n  }\n\n  /**\n   * 全部销毁\n   */\n  destroyAll(): void {\n    this.group.forEach(instance => {\n      if (typeof (instance as any).destroy === 'function') {\n        (instance as any).destroy();\n      }\n    });\n    this.group.clear();\n  }\n\n  /**\n   * 获取平均值\n   */\n  getAverage(): number {\n    if (this.group.size === 0) return 0;\n\n    let sum = 0;\n    this.group.forEach(instance => {\n      sum += instance.getValue();\n    });\n\n    return sum / this.group.size;\n  }\n\n  /**\n   * 获取总和\n   */\n  getSum(): number {\n    let sum = 0;\n    this.group.forEach(instance => {\n      sum += instance.getValue();\n    });\n    return sum;\n  }\n\n  /**\n   * 获取最大值\n   */\n  getMax(): number {\n    let max = -Infinity;\n    this.group.forEach(instance => {\n      const value = instance.getValue();\n      if (value > max) {\n        max = value;\n      }\n    });\n    return isFinite(max) ? max : 0;\n  }\n\n  /**\n   * 获取最小值\n   */\n  getMin(): number {\n    let min = Infinity;\n    this.group.forEach(instance => {\n      const value = instance.getValue();\n      if (value < min) {\n        min = value;\n      }\n    });\n    return isFinite(min) ? min : 0;\n  }\n\n  /**\n   * 获取所有值\n   */\n  getAllValues(): Map<string, number> {\n    const values = new Map<string, number>();\n    this.group.forEach((instance, id) => {\n      values.set(id, instance.getValue());\n    });\n    return values;\n  }\n\n  /**\n   * 获取数量\n   */\n  size(): number {\n    return this.group.size;\n  }\n\n  /**\n   * 清空\n   */\n  clear(): void {\n    this.group.clear();\n  }\n}\n\n\n\n"],"names":[],"mappings":"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"}