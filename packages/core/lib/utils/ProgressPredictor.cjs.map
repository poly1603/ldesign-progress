{"version":3,"file":"ProgressPredictor.cjs","sources":["../../src/utils/ProgressPredictor.ts"],"sourcesContent":["/**\n * 进度预测器 - 基于历史数据预测完成时间\n */\n\nexport interface PredictionData {\n  timestamp: number;\n  value: number;\n}\n\nexport interface PredictionResult {\n  /** 预计完成时间（毫秒时间戳） */\n  estimatedCompletionTime: number;\n  /** 预计剩余时间（毫秒） */\n  estimatedRemainingTime: number;\n  /** 当前速度（单位/毫秒） */\n  currentSpeed: number;\n  /** 平均速度（单位/毫秒） */\n  averageSpeed: number;\n  /** 预测置信度（0-1） */\n  confidence: number;\n}\n\n/**\n * 进度预测器类\n */\nexport class ProgressPredictor {\n  private history: PredictionData[] = [];\n  private maxHistorySize: number;\n  private minDataPoints: number;\n\n  constructor(maxHistorySize: number = 50, minDataPoints: number = 3) {\n    this.maxHistorySize = maxHistorySize;\n    this.minDataPoints = minDataPoints;\n  }\n\n  /**\n   * 记录进度数据点\n   */\n  record(value: number, timestamp: number = Date.now()): void {\n    this.history.push({ timestamp, value });\n\n    // 限制历史数据大小\n    if (this.history.length > this.maxHistorySize) {\n      this.history.shift();\n    }\n  }\n\n  /**\n   * 预测完成时间\n   */\n  predict(targetValue: number = 100): PredictionResult | null {\n    if (this.history.length < this.minDataPoints) {\n      return null; // 数据点不足\n    }\n\n    const currentData = this.history[this.history.length - 1];\n\n    // 如果已经达到或超过目标值\n    if (currentData.value >= targetValue) {\n      return {\n        estimatedCompletionTime: currentData.timestamp,\n        estimatedRemainingTime: 0,\n        currentSpeed: 0,\n        averageSpeed: 0,\n        confidence: 1,\n      };\n    }\n\n    // 计算当前速度（最近两个数据点）\n    const currentSpeed = this.calculateCurrentSpeed();\n\n    // 计算平均速度\n    const averageSpeed = this.calculateAverageSpeed();\n\n    // 使用加权平均（更重视近期速度）\n    const weightedSpeed = currentSpeed * 0.7 + averageSpeed * 0.3;\n\n    // 预测剩余时间\n    const remainingValue = targetValue - currentData.value;\n    const estimatedRemainingTime = weightedSpeed > 0\n      ? remainingValue / weightedSpeed\n      : Infinity;\n\n    // 预测完成时间\n    const estimatedCompletionTime = currentData.timestamp + estimatedRemainingTime;\n\n    // 计算置信度（基于速度稳定性）\n    const confidence = this.calculateConfidence();\n\n    return {\n      estimatedCompletionTime,\n      estimatedRemainingTime,\n      currentSpeed,\n      averageSpeed: averageSpeed,\n      confidence,\n    };\n  }\n\n  /**\n   * 计算当前速度（最近几个数据点）\n   */\n  private calculateCurrentSpeed(): number {\n    const recentPoints = Math.min(5, this.history.length);\n    const recent = this.history.slice(-recentPoints);\n\n    if (recent.length < 2) return 0;\n\n    const first = recent[0];\n    const last = recent[recent.length - 1];\n    const timeDiff = last.timestamp - first.timestamp;\n    const valueDiff = last.value - first.value;\n\n    return timeDiff > 0 ? valueDiff / timeDiff : 0;\n  }\n\n  /**\n   * 计算平均速度（所有数据点）\n   */\n  private calculateAverageSpeed(): number {\n    if (this.history.length < 2) return 0;\n\n    const first = this.history[0];\n    const last = this.history[this.history.length - 1];\n    const timeDiff = last.timestamp - first.timestamp;\n    const valueDiff = last.value - first.value;\n\n    return timeDiff > 0 ? valueDiff / timeDiff : 0;\n  }\n\n  /**\n   * 计算预测置信度（基于速度稳定性）\n   */\n  private calculateConfidence(): number {\n    if (this.history.length < this.minDataPoints) return 0;\n\n    // 计算速度变化率\n    const speeds: number[] = [];\n    for (let i = 1; i < this.history.length; i++) {\n      const timeDiff = this.history[i].timestamp - this.history[i - 1].timestamp;\n      const valueDiff = this.history[i].value - this.history[i - 1].value;\n      if (timeDiff > 0) {\n        speeds.push(valueDiff / timeDiff);\n      }\n    }\n\n    if (speeds.length < 2) return 0.5;\n\n    // 计算速度的标准差\n    const mean = speeds.reduce((sum, s) => sum + s, 0) / speeds.length;\n    const variance = speeds.reduce((sum, s) => sum + Math.pow(s - mean, 2), 0) / speeds.length;\n    const stdDev = Math.sqrt(variance);\n\n    // 标准差越小，置信度越高\n    const coefficient = mean !== 0 ? stdDev / Math.abs(mean) : 1;\n    const confidence = Math.max(0, Math.min(1, 1 - coefficient));\n\n    return confidence;\n  }\n\n  /**\n   * 获取趋势（递增/递减/稳定）\n   */\n  getTrend(): 'increasing' | 'decreasing' | 'stable' {\n    if (this.history.length < 2) return 'stable';\n\n    const speed = this.calculateAverageSpeed();\n\n    if (speed > 0.001) return 'increasing';\n    if (speed < -0.001) return 'decreasing';\n    return 'stable';\n  }\n\n  /**\n   * 格式化剩余时间\n   */\n  static formatRemainingTime(milliseconds: number): string {\n    if (!isFinite(milliseconds)) return '∞';\n\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) return `${days}天 ${hours % 24}小时`;\n    if (hours > 0) return `${hours}小时 ${minutes % 60}分钟`;\n    if (minutes > 0) return `${minutes}分钟 ${seconds % 60}秒`;\n    return `${seconds}秒`;\n  }\n\n  /**\n   * 格式化完成时间\n   */\n  static formatCompletionTime(timestamp: number): string {\n    if (!isFinite(timestamp)) return '未知';\n\n    const date = new Date(timestamp);\n    return date.toLocaleString('zh-CN');\n  }\n\n  /**\n   * 清空历史数据\n   */\n  clear(): void {\n    this.history = [];\n  }\n\n  /**\n   * 获取历史数据\n   */\n  getHistory(): PredictionData[] {\n    return [...this.history];\n  }\n\n  /**\n   * 获取数据点数量\n   */\n  getDataPointCount(): number {\n    return this.history.length;\n  }\n}\n\n\n\n\n"],"names":[],"mappings":"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"}