{"version":3,"file":"SpiralProgress.js","sources":["../../src/components/SpiralProgress.ts"],"sourcesContent":["import { SpiralProgressOptions } from '../types';\nimport { ProgressBase } from '../base';\nimport { createSVGElement } from '../utils';\n\n/**\n * SpiralProgress - 螺旋进度条\n */\nexport class SpiralProgress extends ProgressBase<SpiralProgressOptions> {\n  private svg!: SVGSVGElement;\n  private spiralPath!: SVGPathElement;\n  private textElement?: HTMLElement;\n  private pathLength: number = 0;\n\n  protected getDefaultOptions(): Partial<SpiralProgressOptions> {\n    return {\n      ...super.getDefaultOptions(),\n      size: 200,\n      turns: 3,\n      innerRadius: 20,\n      strokeWidth: 6,\n      clockwise: true,\n    };\n  }\n\n  protected render(): void {\n    this.container.innerHTML = '';\n\n    const size = this.config.get('size') ?? 200;\n\n    // 创建 SVG\n    this.svg = createSVGElement('svg', {\n      width: size,\n      height: size,\n      viewBox: `0 0 ${size} ${size}`,\n      class: 'ld-progress-spiral',\n    }) as SVGSVGElement;\n\n    const className = this.config.get('className');\n    if (className) {\n      this.svg.classList.add(className);\n    }\n\n    this.container.appendChild(this.svg);\n\n    // 创建螺旋路径\n    const center = size / 2;\n    const turns = this.config.get('turns') ?? 3;\n    const innerRadius = this.config.get('innerRadius') ?? 20;\n    const outerRadius = size / 2 - 10;\n    const clockwise = this.config.get('clockwise') ?? true;\n\n    const pathData = this.generateSpiralPath(\n      center,\n      center,\n      innerRadius,\n      outerRadius,\n      turns,\n      clockwise\n    );\n\n    // 背景螺旋\n    const bgPath = createSVGElement('path', {\n      d: pathData,\n      fill: 'none',\n      stroke: '#e4e7ed',\n      'stroke-width': this.config.get('strokeWidth') || 6,\n      'stroke-linecap': 'round',\n      class: 'ld-progress-spiral__bg',\n    });\n    this.svg.appendChild(bgPath);\n\n    // 进度螺旋\n    this.spiralPath = createSVGElement('path', {\n      d: pathData,\n      fill: 'none',\n      'stroke-width': this.config.get('strokeWidth') || 6,\n      'stroke-linecap': 'round',\n      class: 'ld-progress-spiral__progress',\n    }) as SVGPathElement;\n\n    const color = this.config.get('color');\n    const strokeColor = Array.isArray(color) ? color[0] : color || '#409eff';\n    this.spiralPath.setAttribute('stroke', strokeColor);\n\n    // 计算路径长度\n    this.pathLength = this.spiralPath.getTotalLength();\n    this.spiralPath.style.strokeDasharray = String(this.pathLength);\n    this.spiralPath.style.strokeDashoffset = String(this.pathLength);\n\n    this.svg.appendChild(this.spiralPath);\n\n    // 创建文本\n    if (this.config.get('showText')) {\n      this.textElement = document.createElement('div');\n      this.textElement.className = 'ld-progress-spiral__text';\n      this.textElement.style.position = 'absolute';\n      this.textElement.style.top = '50%';\n      this.textElement.style.left = '50%';\n      this.textElement.style.transform = 'translate(-50%, -50%)';\n      this.textElement.style.fontSize = '20px';\n      this.textElement.style.fontWeight = 'bold';\n\n      this.container.style.position = 'relative';\n      this.container.style.display = 'inline-block';\n      this.container.appendChild(this.textElement);\n    }\n\n    this.updateProgress(this.currentValue);\n  }\n\n  /**\n   * 生成螺旋路径\n   */\n  private generateSpiralPath(\n    cx: number,\n    cy: number,\n    innerRadius: number,\n    outerRadius: number,\n    turns: number,\n    clockwise: boolean\n  ): string {\n    const points = turns * 100;\n    const radiusStep = (outerRadius - innerRadius) / points;\n    const angleStep = (turns * 2 * Math.PI) / points;\n    const direction = clockwise ? 1 : -1;\n\n    let path = '';\n\n    for (let i = 0; i <= points; i++) {\n      const radius = innerRadius + i * radiusStep;\n      const angle = i * angleStep * direction;\n      const x = cx + radius * Math.cos(angle);\n      const y = cy + radius * Math.sin(angle);\n\n      if (i === 0) {\n        path = `M ${x} ${y}`;\n      } else {\n        path += ` L ${x} ${y}`;\n      }\n    }\n\n    return path;\n  }\n\n  protected updateProgress(value: number): void {\n    const percentage = this.config.getPercentage(value);\n\n    // 更新螺旋进度\n    const offset = this.pathLength - (this.pathLength * percentage) / 100;\n    this.spiralPath.style.strokeDashoffset = String(offset);\n\n    // 更新文本\n    if (this.textElement) {\n      this.textElement.textContent = this.formatText(value);\n    }\n  }\n}\n\n\n\n"],"names":[],"mappings":"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"}