{"version":3,"file":"MemoryManager.js","sources":["../../src/utils/MemoryManager.ts"],"sourcesContent":["/**\n * 内存管理器 - 对象池和缓存管理\n */\n\n/**\n * 对象池类 - 复用对象减少 GC 压力\n */\nexport class ObjectPool<T> {\n  private pool: T[] = [];\n  private factory: () => T;\n  private reset?: (obj: T) => void;\n  private maxSize: number;\n\n  constructor(factory: () => T, reset?: (obj: T) => void, maxSize: number = 50) {\n    this.factory = factory;\n    this.reset = reset;\n    this.maxSize = maxSize;\n  }\n\n  /**\n   * 从池中获取对象\n   */\n  acquire(): T {\n    if (this.pool.length > 0) {\n      return this.pool.pop()!;\n    }\n    return this.factory();\n  }\n\n  /**\n   * 归还对象到池中\n   */\n  release(obj: T): void {\n    if (this.pool.length < this.maxSize) {\n      if (this.reset) {\n        this.reset(obj);\n      }\n      this.pool.push(obj);\n    }\n  }\n\n  /**\n   * 清空池\n   */\n  clear(): void {\n    this.pool = [];\n  }\n\n  /**\n   * 获取池中对象数量\n   */\n  size(): number {\n    return this.pool.length;\n  }\n}\n\n/**\n * DOM 元素池\n */\nexport class DOMElementPool {\n  private pools: Map<string, ObjectPool<HTMLElement>> = new Map();\n\n  /**\n   * 获取指定标签的元素\n   */\n  acquire(tag: string, className?: string): HTMLElement {\n    const key = `${tag}:${className || ''}`;\n\n    if (!this.pools.has(key)) {\n      this.pools.set(\n        key,\n        new ObjectPool<HTMLElement>(\n          () => {\n            const el = document.createElement(tag);\n            if (className) {\n              el.className = className;\n            }\n            return el;\n          },\n          (el) => {\n            // 重置元素状态\n            el.innerHTML = '';\n            el.style.cssText = '';\n            if (!className) {\n              el.className = '';\n            }\n            // 移除所有属性\n            Array.from(el.attributes).forEach(attr => {\n              if (attr.name !== 'class' || !className) {\n                el.removeAttribute(attr.name);\n              }\n            });\n          }\n        )\n      );\n    }\n\n    return this.pools.get(key)!.acquire();\n  }\n\n  /**\n   * 归还元素\n   */\n  release(element: HTMLElement, tag: string, className?: string): void {\n    const key = `${tag}:${className || ''}`;\n    const pool = this.pools.get(key);\n    if (pool) {\n      // 从 DOM 中移除\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n      pool.release(element);\n    }\n  }\n\n  /**\n   * 清空所有池\n   */\n  clearAll(): void {\n    this.pools.forEach(pool => pool.clear());\n    this.pools.clear();\n  }\n}\n\n/**\n * SVG 元素池\n */\nexport class SVGElementPool {\n  private pools: Map<string, ObjectPool<SVGElement>> = new Map();\n\n  /**\n   * 获取指定标签的 SVG 元素\n   */\n  acquire(tag: string, attributes?: Record<string, string>): SVGElement {\n    const key = tag;\n\n    if (!this.pools.has(key)) {\n      this.pools.set(\n        key,\n        new ObjectPool<SVGElement>(\n          () => document.createElementNS('http://www.w3.org/2000/svg', tag),\n          (el) => {\n            // 重置元素状态\n            el.innerHTML = '';\n            // 移除所有属性\n            Array.from(el.attributes).forEach(attr => {\n              el.removeAttribute(attr.name);\n            });\n          }\n        )\n      );\n    }\n\n    const element = this.pools.get(key)!.acquire();\n\n    // 设置属性\n    if (attributes) {\n      Object.entries(attributes).forEach(([key, value]) => {\n        element.setAttribute(key, value);\n      });\n    }\n\n    return element;\n  }\n\n  /**\n   * 归还元素\n   */\n  release(element: SVGElement, tag: string): void {\n    const pool = this.pools.get(tag);\n    if (pool) {\n      // 从 DOM 中移除\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n      pool.release(element);\n    }\n  }\n\n  /**\n   * 清空所有池\n   */\n  clearAll(): void {\n    this.pools.forEach(pool => pool.clear());\n    this.pools.clear();\n  }\n}\n\n/**\n * 计算结果缓存 - 使用 WeakMap 自动 GC\n */\nexport class ComputationCache<K extends object, V> {\n  private cache: WeakMap<K, Map<string, V>> = new WeakMap();\n\n  /**\n   * 获取缓存值\n   */\n  get(key: K, subKey: string): V | undefined {\n    const subCache = this.cache.get(key);\n    return subCache?.get(subKey);\n  }\n\n  /**\n   * 设置缓存值\n   */\n  set(key: K, subKey: string, value: V): void {\n    let subCache = this.cache.get(key);\n    if (!subCache) {\n      subCache = new Map();\n      this.cache.set(key, subCache);\n    }\n    subCache.set(subKey, value);\n  }\n\n  /**\n   * 检查是否有缓存\n   */\n  has(key: K, subKey: string): boolean {\n    return this.cache.get(key)?.has(subKey) || false;\n  }\n\n  /**\n   * 清除特定键的缓存\n   */\n  delete(key: K, subKey?: string): void {\n    if (subKey) {\n      this.cache.get(key)?.delete(subKey);\n    } else {\n      this.cache.delete(key);\n    }\n  }\n}\n\n/**\n * Canvas 上下文缓存\n */\nexport class CanvasContextCache {\n  private cache: WeakMap<HTMLCanvasElement, CanvasRenderingContext2D> = new WeakMap();\n\n  /**\n   * 获取或创建上下文\n   */\n  get(canvas: HTMLCanvasElement, contextAttributes?: CanvasRenderingContext2DSettings): CanvasRenderingContext2D {\n    let ctx = this.cache.get(canvas);\n    if (!ctx) {\n      ctx = canvas.getContext('2d', contextAttributes)!;\n      this.cache.set(canvas, ctx);\n    }\n    return ctx;\n  }\n\n  /**\n   * 清除缓存\n   */\n  clear(canvas: HTMLCanvasElement): void {\n    this.cache.delete(canvas);\n  }\n}\n\n/**\n * 渐变对象缓存\n */\nexport class GradientCache {\n  private cache: Map<string, CanvasGradient | string> = new Map();\n\n  /**\n   * 生成缓存键\n   */\n  private generateKey(colors: string[], direction?: string): string {\n    return `${colors.join(',')}:${direction || 'default'}`;\n  }\n\n  /**\n   * 获取或创建渐变\n   */\n  get(\n    colors: string[],\n    direction?: string,\n    creator?: () => CanvasGradient | string\n  ): CanvasGradient | string | undefined {\n    const key = this.generateKey(colors, direction);\n\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n\n    if (creator) {\n      const gradient = creator();\n      this.cache.set(key, gradient);\n      return gradient;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * 设置渐变\n   */\n  set(colors: string[], gradient: CanvasGradient | string, direction?: string): void {\n    const key = this.generateKey(colors, direction);\n    this.cache.set(key, gradient);\n  }\n\n  /**\n   * 清空缓存\n   */\n  clear(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * 获取缓存大小\n   */\n  size(): number {\n    return this.cache.size;\n  }\n}\n\n/**\n * 内存监控器（开发模式）\n */\nexport class MemoryMonitor {\n  private instances: WeakSet<any> = new WeakSet();\n  private creationTimes: WeakMap<any, number> = new WeakMap();\n  private instanceCount: number = 0;\n  private peakCount: number = 0;\n  private enabled: boolean = false;\n\n  /**\n   * 启用监控\n   */\n  enable(): void {\n    this.enabled = true;\n  }\n\n  /**\n   * 禁用监控\n   */\n  disable(): void {\n    this.enabled = false;\n  }\n\n  /**\n   * 注册实例\n   */\n  register(instance: any): void {\n    if (!this.enabled) return;\n\n    this.instances.add(instance);\n    this.creationTimes.set(instance, Date.now());\n    this.instanceCount++;\n\n    if (this.instanceCount > this.peakCount) {\n      this.peakCount = this.instanceCount;\n    }\n  }\n\n  /**\n   * 注销实例\n   */\n  unregister(instance: any): void {\n    if (!this.enabled) return;\n\n    if (this.instances.has(instance)) {\n      this.instanceCount--;\n    }\n  }\n\n  /**\n   * 获取统计信息\n   */\n  getStats(): {\n    currentCount: number;\n    peakCount: number;\n  } {\n    return {\n      currentCount: this.instanceCount,\n      peakCount: this.peakCount,\n    };\n  }\n\n  /**\n   * 重置统计\n   */\n  reset(): void {\n    this.instanceCount = 0;\n    this.peakCount = 0;\n  }\n\n  /**\n   * 获取实例存活时间\n   */\n  getLifetime(instance: any): number | null {\n    const creationTime = this.creationTimes.get(instance);\n    if (creationTime) {\n      return Date.now() - creationTime;\n    }\n    return null;\n  }\n}\n\n// 导出单例实例\nexport const domElementPool = new DOMElementPool();\nexport const svgElementPool = new SVGElementPool();\nexport const canvasContextCache = new CanvasContextCache();\nexport const gradientCache = new GradientCache();\nexport const memoryMonitor = new MemoryMonitor();\n\n// 开发模式下启用内存监控\nif (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n  memoryMonitor.enable();\n}\n\n\n\n\n"],"names":["key"],"mappings":"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"}