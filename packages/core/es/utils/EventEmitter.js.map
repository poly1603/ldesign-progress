{"version":3,"file":"EventEmitter.js","sources":["../../src/utils/EventEmitter.ts"],"sourcesContent":["import { EventHandler, EventType } from '../types';\r\n\r\n/**\r\n * 事件发射器类\r\n */\r\nexport class EventEmitter {\r\n  private events: Map<EventType, Set<EventHandler>>;\r\n\r\n  constructor() {\r\n    this.events = new Map();\r\n  }\r\n\r\n  /**\r\n   * 监听事件\r\n   */\r\n  on(event: EventType, handler: EventHandler): this {\r\n    if (!this.events.has(event)) {\r\n      this.events.set(event, new Set());\r\n    }\r\n    this.events.get(event)!.add(handler);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 监听一次事件\r\n   */\r\n  once(event: EventType, handler: EventHandler): this {\r\n    const onceHandler: EventHandler = (...args: any[]) => {\r\n      handler(...args);\r\n      this.off(event, onceHandler);\r\n    };\r\n    return this.on(event, onceHandler);\r\n  }\r\n\r\n  /**\r\n   * 取消监听\r\n   */\r\n  off(event: EventType, handler?: EventHandler): this {\r\n    if (!handler) {\r\n      this.events.delete(event);\r\n      return this;\r\n    }\r\n\r\n    const handlers = this.events.get(event);\r\n    if (handlers) {\r\n      handlers.delete(handler);\r\n      if (handlers.size === 0) {\r\n        this.events.delete(event);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 触发事件\r\n   */\r\n  emit(event: EventType, ...args: any[]): this {\r\n    const handlers = this.events.get(event);\r\n    if (handlers) {\r\n      handlers.forEach((handler) => {\r\n        try {\r\n          handler(...args);\r\n        } catch (error) {\r\n          console.error(`Error in event handler for \"${event}\":`, error);\r\n        }\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 清除所有事件监听\r\n   */\r\n  removeAllListeners(): void {\r\n    this.events.clear();\r\n  }\r\n\r\n  /**\r\n   * 获取事件监听器数量\r\n   */\r\n  listenerCount(event: EventType): number {\r\n    return this.events.get(event)?.size || 0;\r\n  }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;;;;AAKO,MAAM,YAAA,CAAa;AAAA,EAGxB,WAAA,GAAc;AACZ,IAAA,IAAA,CAAK,MAAA,uBAAa,GAAA,EAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,EAAA,CAAG,OAAkB,OAAA,EAA6B;AAChD,IAAA,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,KAAK,CAAA,EAAG;AAC3B,MAAA,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,KAAA,kBAAO,IAAI,KAAK,CAAA;AAAA,IAClC;AACA,IAAA,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,KAAK,CAAA,CAAG,IAAI,OAAO,CAAA;AACnC,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,IAAA,CAAK,OAAkB,OAAA,EAA6B;AAClD,IAAA,MAAM,WAAA,GAA4B,IAAI,IAAA,KAAgB;AACpD,MAAA,OAAA,CAAQ,GAAG,IAAI,CAAA;AACf,MAAA,IAAA,CAAK,GAAA,CAAI,OAAO,WAAW,CAAA;AAAA,IAC7B,CAAA;AACA,IAAA,OAAO,IAAA,CAAK,EAAA,CAAG,KAAA,EAAO,WAAW,CAAA;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,GAAA,CAAI,OAAkB,OAAA,EAA8B;AAClD,IAAA,IAAI,CAAC,OAAA,EAAS;AACZ,MAAA,IAAA,CAAK,MAAA,CAAO,OAAO,KAAK,CAAA;AACxB,MAAA,OAAO,IAAA;AAAA,IACT;AAEA,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,KAAK,CAAA;AACtC,IAAA,IAAI,QAAA,EAAU;AACZ,MAAA,QAAA,CAAS,OAAO,OAAO,CAAA;AACvB,MAAA,IAAI,QAAA,CAAS,SAAS,CAAA,EAAG;AACvB,QAAA,IAAA,CAAK,MAAA,CAAO,OAAO,KAAK,CAAA;AAAA,MAC1B;AAAA,IACF;AACA,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,IAAA,CAAK,UAAqB,IAAA,EAAmB;AAC3C,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,KAAK,CAAA;AACtC,IAAA,IAAI,QAAA,EAAU;AACZ,MAAA,QAAA,CAAS,OAAA,CAAQ,CAAC,OAAA,KAAY;AAC5B,QAAA,IAAI;AACF,UAAA,OAAA,CAAQ,GAAG,IAAI,CAAA;AAAA,QACjB,SAAS,KAAA,EAAO;AACd,UAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,4BAAA,EAA+B,KAAK,CAAA,EAAA,CAAA,EAAM,KAAK,CAAA;AAAA,QAC/D;AAAA,MACF,CAAC,CAAA;AAAA,IACH;AACA,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAA,GAA2B;AACzB,IAAA,IAAA,CAAK,OAAO,KAAA,EAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,KAAA,EAA0B;AACtC,IAAA,OAAO,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,KAAK,GAAG,IAAA,IAAQ,CAAA;AAAA,EACzC;AACF;;;;"}