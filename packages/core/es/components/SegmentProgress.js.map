{"version":3,"file":"SegmentProgress.js","sources":["../../src/components/SegmentProgress.ts"],"sourcesContent":["import { SegmentProgressOptions } from '../types';\r\nimport { LinearProgress } from './LinearProgress';\r\nimport { createElement, toPx } from '../utils';\r\n\r\n/**\r\n * 分段进度条\r\n */\r\nexport class SegmentProgress extends LinearProgress {\r\n  protected getDefaultOptions(): Partial<SegmentProgressOptions> {\r\n    return {\r\n      ...super.getDefaultOptions(),\r\n      segments: [],\r\n      gap: 4,\r\n    };\r\n  }\r\n\r\n  protected render(): void {\r\n    // 清空容器\r\n    this.container.innerHTML = '';\r\n\r\n    // 创建包装器\r\n    this.wrapper = createElement('div', 'ld-progress-segment', this.container);\r\n    const direction = this.config.get('direction') ?? 'horizontal';\r\n    this.wrapper.classList.add(`ld-progress-segment--${direction}`);\r\n\r\n    // 添加自定义类名\r\n    const className = this.config.get('className');\r\n    if (className) {\r\n      this.wrapper.classList.add(className);\r\n    }\r\n\r\n    // 设置尺寸\r\n    const strokeWidth = this.config.get('strokeWidth') ?? 6;\r\n    if (direction === 'horizontal') {\r\n      this.wrapper.style.height = toPx(strokeWidth);\r\n      const width = this.config.get('width');\r\n      if (width) {\r\n        this.wrapper.style.width = toPx(width);\r\n      }\r\n    } else {\r\n      this.wrapper.style.width = toPx(strokeWidth);\r\n      const height = this.config.get('height');\r\n      if (height) {\r\n        this.wrapper.style.height = toPx(height);\r\n      }\r\n    }\r\n\r\n    // 创建轨道\r\n    this.track = createElement('div', 'ld-progress-segment__track', this.wrapper);\r\n    const trackColor = this.config.get('trackColor');\r\n    if (trackColor) {\r\n      this.track.style.backgroundColor = trackColor;\r\n    }\r\n\r\n    // 渲染分段\r\n    this.renderSegments();\r\n\r\n    // 创建文本（如果需要）\r\n    if (this.config.get('showText')) {\r\n      this.textElement = createElement('div', 'ld-progress-segment__text', this.container);\r\n    }\r\n\r\n    // 更新进度\r\n    this.updateProgress(this.currentValue);\r\n  }\r\n\r\n  protected renderSegments(): void {\r\n    const segments = this.config.get('segments') ?? [];\r\n    const direction = this.config.get('direction') ?? 'horizontal';\r\n    const gap = this.config.get('gap') ?? 4;\r\n    const max = this.config.get('max') ?? 100;\r\n\r\n    this.segmentBars = [];\r\n\r\n    if (segments.length === 0) {\r\n      // 如果没有定义分段，创建默认的单一进度条\r\n      this.bar = createElement('div', 'ld-progress-segment__bar', this.track);\r\n      const color = this.config.get('color');\r\n      if (color) {\r\n        const colorValue = Array.isArray(color) ? color[0] : color;\r\n        this.bar.style.backgroundColor = colorValue;\r\n      }\r\n      return;\r\n    }\r\n\r\n    let accumulatedValue = 0;\r\n\r\n    segments.forEach((segment, index) => {\r\n      const segmentWrapper = createElement('div', 'ld-progress-segment__wrapper', this.track);\r\n      const segmentBar = createElement('div', 'ld-progress-segment__bar', segmentWrapper);\r\n      \r\n      // 设置颜色\r\n      if (segment.color) {\r\n        segmentBar.style.backgroundColor = segment.color;\r\n      }\r\n\r\n      // 计算位置和大小\r\n      const segmentPercentage = (segment.value / max) * 100;\r\n      \r\n      if (direction === 'horizontal') {\r\n        segmentWrapper.style.position = 'absolute';\r\n        segmentWrapper.style.left = `${accumulatedValue}%`;\r\n        segmentWrapper.style.width = `${segmentPercentage}%`;\r\n        \r\n        if (index > 0) {\r\n          segmentWrapper.style.paddingLeft = `${gap}px`;\r\n        }\r\n      } else {\r\n        segmentWrapper.style.position = 'absolute';\r\n        segmentWrapper.style.bottom = `${accumulatedValue}%`;\r\n        segmentWrapper.style.height = `${segmentPercentage}%`;\r\n        \r\n        if (index > 0) {\r\n          segmentWrapper.style.paddingBottom = `${gap}px`;\r\n        }\r\n      }\r\n\r\n      accumulatedValue += segmentPercentage;\r\n      this.segmentBars.push(segmentBar);\r\n\r\n      // 添加标签\r\n      if (segment.label) {\r\n        const label = createElement('span', 'ld-progress-segment__label', segmentBar);\r\n        label.textContent = segment.label;\r\n      }\r\n    });\r\n\r\n    // 确保轨道相对定位\r\n    this.track.style.position = 'relative';\r\n  }\r\n\r\n  protected updateProgress(value: number): void {\r\n    const segments = this.config.get('segments') ?? [];\r\n    const direction = this.config.get('direction') ?? 'horizontal';\r\n\r\n    if (segments.length === 0) {\r\n      // 使用默认进度条更新\r\n      super.updateProgress(value);\r\n      return;\r\n    }\r\n\r\n    const max = this.config.get('max') ?? 100;\r\n    let remainingValue = value;\r\n\r\n    // 更新每个分段的进度\r\n    this.segmentBars.forEach((segmentBar, index) => {\r\n      const segment = segments[index];\r\n      const segmentValue = Math.min(segment.value, remainingValue);\r\n      const segmentPercentage = (segmentValue / segment.value) * 100;\r\n\r\n      if (direction === 'horizontal') {\r\n        segmentBar.style.width = `${segmentPercentage}%`;\r\n      } else {\r\n        segmentBar.style.height = `${segmentPercentage}%`;\r\n      }\r\n\r\n      remainingValue -= segmentValue;\r\n\r\n      // 如果分段完成，添加完成样式\r\n      if (segmentValue >= segment.value) {\r\n        segmentBar.classList.add('ld-progress-segment__bar--completed');\r\n      } else {\r\n        segmentBar.classList.remove('ld-progress-segment__bar--completed');\r\n      }\r\n    });\r\n\r\n    // 更新文本\r\n    if (this.textElement) {\r\n      this.textElement.textContent = this.formatText(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置分段\r\n   */\r\n  setSegments(segments: SegmentProgressOptions['segments']): void {\r\n    this.config.set('segments', segments);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * 添加分段\r\n   */\r\n  addSegment(segment: { value: number; color?: string; label?: string }): void {\r\n    const segments = this.config.get('segments') ?? [];\r\n    segments.push(segment);\r\n    this.config.set('segments', segments);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * 设置间隙\r\n   */\r\n  setGap(gap: number): void {\r\n    this.config.set('gap', gap);\r\n    this.render();\r\n  }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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"}