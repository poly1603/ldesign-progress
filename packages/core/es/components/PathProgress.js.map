{"version":3,"file":"PathProgress.js","sources":["../../src/components/PathProgress.ts"],"sourcesContent":["import { PathProgressOptions } from '../types';\nimport { ProgressBase } from '../base';\nimport { createSVGElement, setAttributes } from '../utils';\n\n/**\n * PathProgress - 沿 SVG 路径运动的进度条\n */\nexport class PathProgress extends ProgressBase<PathProgressOptions> {\n  private svg!: SVGSVGElement;\n  private pathElement!: SVGPathElement;\n  private indicatorElement!: SVGElement;\n  private pathLength: number = 0;\n  private textElement?: HTMLElement;\n\n  protected getDefaultOptions(): Partial<PathProgressOptions> {\n    return {\n      ...super.getDefaultOptions(),\n      pathData: 'M 10 80 Q 95 10 180 80', // 默认贝塞尔曲线\n      width: 200,\n      height: 100,\n      strokeWidth: 4,\n      indicatorType: 'circle',\n      indicatorSize: 12,\n      showPath: true,\n      pathColor: '#e4e7ed',\n    };\n  }\n\n  protected render(): void {\n    this.container.innerHTML = '';\n\n    const width = this.config.get('width') ?? 200;\n    const height = this.config.get('height') ?? 100;\n\n    // 创建 SVG\n    this.svg = createSVGElement('svg', {\n      width,\n      height,\n      viewBox: `0 0 ${width} ${height}`,\n      class: 'ld-progress-path',\n    }) as SVGSVGElement;\n\n    const className = this.config.get('className');\n    if (className) {\n      this.svg.classList.add(className);\n    }\n\n    this.container.appendChild(this.svg);\n\n    // 创建路径\n    const pathData = this.config.get('pathData') ?? 'M 10 80 Q 95 10 180 80';\n    const strokeWidth = this.config.get('strokeWidth') ?? 4;\n\n    // 背景路径\n    if (this.config.get('showPath')) {\n      const backgroundPath = createSVGElement('path', {\n        d: pathData,\n        fill: 'none',\n        stroke: this.config.get('pathColor') || '#e4e7ed',\n        'stroke-width': strokeWidth,\n        'stroke-linecap': 'round',\n        class: 'ld-progress-path__bg',\n      });\n      this.svg.appendChild(backgroundPath);\n    }\n\n    // 进度路径\n    this.pathElement = createSVGElement('path', {\n      d: pathData,\n      fill: 'none',\n      'stroke-width': strokeWidth,\n      'stroke-linecap': 'round',\n      class: 'ld-progress-path__line',\n    }) as SVGPathElement;\n\n    // 设置颜色\n    const color = this.config.get('color');\n    if (color) {\n      const strokeColor = Array.isArray(color) ? color[0] : color;\n      this.pathElement.setAttribute('stroke', strokeColor);\n    }\n\n    this.svg.appendChild(this.pathElement);\n\n    // 计算路径长度\n    this.pathLength = this.pathElement.getTotalLength();\n    this.pathElement.style.strokeDasharray = String(this.pathLength);\n    this.pathElement.style.strokeDashoffset = String(this.pathLength);\n\n    // 创建指示器\n    this.createIndicator();\n\n    // 创建文本\n    if (this.config.get('showText')) {\n      this.textElement = document.createElement('div');\n      this.textElement.className = 'ld-progress-path__text';\n      this.textElement.style.position = 'absolute';\n      this.container.style.position = 'relative';\n      this.container.style.display = 'inline-block';\n      this.container.appendChild(this.textElement);\n    }\n\n    this.updateProgress(this.currentValue);\n  }\n\n  /**\n   * 创建路径指示器\n   */\n  private createIndicator(): void {\n    const indicatorType = this.config.get('indicatorType') ?? 'circle';\n    const indicatorSize = this.config.get('indicatorSize') ?? 12;\n    const color = this.config.get('color');\n    const indicatorColor = Array.isArray(color) ? color[0] : color || '#409eff';\n\n    switch (indicatorType) {\n      case 'circle':\n        this.indicatorElement = createSVGElement('circle', {\n          r: indicatorSize / 2,\n          fill: indicatorColor,\n          class: 'ld-progress-path__indicator',\n        }) as SVGCircleElement;\n        break;\n\n      case 'arrow':\n        this.indicatorElement = createSVGElement('polygon', {\n          points: `0,-${indicatorSize} ${indicatorSize * 0.8},0 0,${indicatorSize}`,\n          fill: indicatorColor,\n          class: 'ld-progress-path__indicator',\n        }) as SVGPolygonElement;\n        break;\n\n      case 'square':\n        this.indicatorElement = createSVGElement('rect', {\n          width: indicatorSize,\n          height: indicatorSize,\n          fill: indicatorColor,\n          class: 'ld-progress-path__indicator',\n        }) as SVGRectElement;\n        break;\n\n      case 'none':\n        return;\n\n      default:\n        this.indicatorElement = createSVGElement('circle', {\n          r: indicatorSize / 2,\n          fill: indicatorColor,\n          class: 'ld-progress-path__indicator',\n        }) as SVGCircleElement;\n    }\n\n    this.svg.appendChild(this.indicatorElement);\n  }\n\n  protected updateProgress(value: number): void {\n    const percentage = this.config.getPercentage(value);\n\n    // 更新路径\n    const offset = this.pathLength - (this.pathLength * percentage) / 100;\n    this.pathElement.style.strokeDashoffset = String(offset);\n\n    // 更新指示器位置\n    if (this.indicatorElement) {\n      const point = this.pathElement.getPointAtLength(\n        (this.pathLength * percentage) / 100\n      );\n\n      if (this.indicatorElement instanceof SVGCircleElement) {\n        this.indicatorElement.setAttribute('cx', String(point.x));\n        this.indicatorElement.setAttribute('cy', String(point.y));\n      } else if (this.indicatorElement instanceof SVGRectElement) {\n        const size = this.config.get('indicatorSize') ?? 12;\n        this.indicatorElement.setAttribute('x', String(point.x - size / 2));\n        this.indicatorElement.setAttribute('y', String(point.y - size / 2));\n      } else {\n        // 箭头或其他，使用 transform\n        this.indicatorElement.setAttribute(\n          'transform',\n          `translate(${point.x}, ${point.y})`\n        );\n      }\n    }\n\n    // 更新文本\n    if (this.textElement) {\n      this.textElement.textContent = this.formatText(value);\n    }\n  }\n\n  /**\n   * 设置路径数据\n   */\n  setPathData(pathData: string): void {\n    this.config.set('pathData', pathData);\n    this.render();\n  }\n\n  /**\n   * 设置指示器类型\n   */\n  setIndicatorType(type: 'circle' | 'arrow' | 'square' | 'none'): void {\n    this.config.set('indicatorType', type);\n    this.render();\n  }\n}\n\n\n\n"],"names":[],"mappings":"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"}