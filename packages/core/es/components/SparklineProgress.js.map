{"version":3,"file":"SparklineProgress.js","sources":["../../src/components/SparklineProgress.ts"],"sourcesContent":["import { SparklineProgressOptions } from '../types';\nimport { ProgressBase } from '../base';\nimport { createSVGElement, createBezierPath } from '../utils';\n\n/**\n * SparklineProgress - 迷你图进度条\n */\nexport class SparklineProgress extends ProgressBase<SparklineProgressOptions> {\n  private svg!: SVGSVGElement;\n  private dataPath!: SVGPathElement;\n  private fillPath!: SVGPathElement;\n  private progressLine!: SVGLineElement;\n  private dataPoints: number[] = [];\n\n  protected getDefaultOptions(): Partial<SparklineProgressOptions> {\n    return {\n      ...super.getDefaultOptions(),\n      width: 200,\n      height: 60,\n      data: [],\n      lineColor: '#409eff',\n      fillColor: 'rgba(64, 158, 255, 0.1)',\n      strokeWidth: 2,\n      smooth: true,\n      showDots: false,\n      dotSize: 4,\n    };\n  }\n\n  protected render(): void {\n    this.container.innerHTML = '';\n\n    const width = this.config.get('width') ?? 200;\n    const height = this.config.get('height') ?? 60;\n\n    // 创建 SVG\n    this.svg = createSVGElement('svg', {\n      width,\n      height,\n      viewBox: `0 0 ${width} ${height}`,\n      class: 'ld-progress-sparkline',\n    }) as SVGSVGElement;\n\n    const className = this.config.get('className');\n    if (className) {\n      this.svg.classList.add(className);\n    }\n\n    this.container.appendChild(this.svg);\n\n    // 获取数据\n    this.dataPoints = this.config.get('data') || this.generateDefaultData();\n\n    // 创建填充区域\n    this.createFillArea();\n\n    // 创建线条\n    this.createLine();\n\n    // 创建数据点\n    if (this.config.get('showDots')) {\n      this.createDots();\n    }\n\n    // 创建进度指示线\n    this.createProgressLine();\n\n    this.updateProgress(this.currentValue);\n  }\n\n  /**\n   * 生成默认数据\n   */\n  private generateDefaultData(): number[] {\n    const points = 20;\n    const data: number[] = [];\n    for (let i = 0; i < points; i++) {\n      data.push(30 + Math.random() * 40);\n    }\n    return data;\n  }\n\n  /**\n   * 创建填充区域\n   */\n  private createFillArea(): void {\n    const width = this.config.get('width') ?? 200;\n    const height = this.config.get('height') ?? 60;\n    const points = this.dataPointsToCoordinates();\n\n    let pathData = `M 0 ${height}`;\n    points.forEach((p, i) => {\n      if (i === 0) {\n        pathData += ` L ${p.x} ${p.y}`;\n      } else {\n        pathData += ` L ${p.x} ${p.y}`;\n      }\n    });\n    pathData += ` L ${width} ${height} Z`;\n\n    this.fillPath = createSVGElement('path', {\n      d: pathData,\n      fill: this.config.get('fillColor') || 'rgba(64, 158, 255, 0.1)',\n      class: 'ld-progress-sparkline__fill',\n    }) as SVGPathElement;\n\n    this.svg.appendChild(this.fillPath);\n  }\n\n  /**\n   * 创建线条\n   */\n  private createLine(): void {\n    const points = this.dataPointsToCoordinates();\n    const smooth = this.config.get('smooth');\n\n    let pathData: string;\n    if (smooth) {\n      pathData = createBezierPath(points, 0.3);\n    } else {\n      pathData = `M ${points[0].x} ${points[0].y}`;\n      for (let i = 1; i < points.length; i++) {\n        pathData += ` L ${points[i].x} ${points[i].y}`;\n      }\n    }\n\n    this.dataPath = createSVGElement('path', {\n      d: pathData,\n      fill: 'none',\n      stroke: this.config.get('lineColor') || '#409eff',\n      'stroke-width': this.config.get('strokeWidth') || 2,\n      'stroke-linecap': 'round',\n      'stroke-linejoin': 'round',\n      class: 'ld-progress-sparkline__line',\n    }) as SVGPathElement;\n\n    this.svg.appendChild(this.dataPath);\n  }\n\n  /**\n   * 创建数据点\n   */\n  private createDots(): void {\n    const points = this.dataPointsToCoordinates();\n    const dotSize = this.config.get('dotSize') ?? 4;\n    const lineColor = this.config.get('lineColor') || '#409eff';\n\n    points.forEach(point => {\n      const dot = createSVGElement('circle', {\n        cx: point.x,\n        cy: point.y,\n        r: dotSize,\n        fill: lineColor,\n        class: 'ld-progress-sparkline__dot',\n      });\n      this.svg.appendChild(dot);\n    });\n  }\n\n  /**\n   * 创建进度指示线\n   */\n  private createProgressLine(): void {\n    const height = this.config.get('height') ?? 60;\n\n    this.progressLine = createSVGElement('line', {\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: height,\n      stroke: '#f56c6c',\n      'stroke-width': 2,\n      'stroke-dasharray': '4,4',\n      class: 'ld-progress-sparkline__progress-line',\n    }) as SVGLineElement;\n\n    this.svg.appendChild(this.progressLine);\n  }\n\n  /**\n   * 将数据点转换为坐标\n   */\n  private dataPointsToCoordinates(): Array<{ x: number; y: number }> {\n    const width = this.config.get('width') ?? 200;\n    const height = this.config.get('height') ?? 60;\n    const padding = 5;\n\n    const maxValue = Math.max(...this.dataPoints);\n    const minValue = Math.min(...this.dataPoints);\n    const range = maxValue - minValue || 1;\n\n    return this.dataPoints.map((value, index) => {\n      const x = padding + (index / (this.dataPoints.length - 1)) * (width - 2 * padding);\n      const y = padding + ((maxValue - value) / range) * (height - 2 * padding);\n      return { x, y };\n    });\n  }\n\n  protected updateProgress(value: number): void {\n    const width = this.config.get('width') ?? 200;\n    const percentage = this.config.getPercentage(value);\n    const x = (width * percentage) / 100;\n\n    // 更新进度线位置\n    if (this.progressLine) {\n      this.progressLine.setAttribute('x1', String(x));\n      this.progressLine.setAttribute('x2', String(x));\n    }\n  }\n\n  /**\n   * 设置数据\n   */\n  setData(data: number[]): void {\n    this.config.set('data', data);\n    this.render();\n  }\n\n  /**\n   * 添加数据点\n   */\n  addDataPoint(value: number): void {\n    const data = this.config.get('data') || [];\n    data.push(value);\n    this.setData(data);\n  }\n}\n\n\n\n"],"names":[],"mappings":"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"}