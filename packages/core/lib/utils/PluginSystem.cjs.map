{"version":3,"file":"PluginSystem.cjs","sources":["../../src/utils/PluginSystem.ts"],"sourcesContent":["/**\n * 插件系统 - 支持第三方扩展\n */\n\nimport { BaseProgressOptions } from '../types';\n\n/**\n * 插件生命周期钩子\n */\nexport interface PluginHooks {\n  /** 进度条初始化前 */\n  beforeInit?: (options: Partial<BaseProgressOptions>) => void | Partial<BaseProgressOptions>;\n  /** 进度条初始化后 */\n  afterInit?: (instance: any) => void;\n  /** 渲染前 */\n  beforeRender?: (instance: any) => void;\n  /** 渲染后 */\n  afterRender?: (instance: any) => void;\n  /** 值更新前 */\n  beforeValueChange?: (oldValue: number, newValue: number) => number | void;\n  /** 值更新后 */\n  afterValueChange?: (value: number) => void;\n  /** 销毁前 */\n  beforeDestroy?: (instance: any) => void;\n  /** 销毁后 */\n  afterDestroy?: () => void;\n}\n\n/**\n * 插件接口\n */\nexport interface Plugin {\n  /** 插件名称 */\n  name: string;\n  /** 插件版本 */\n  version?: string;\n  /** 插件描述 */\n  description?: string;\n  /** 生命周期钩子 */\n  hooks?: PluginHooks;\n  /** 安装方法 */\n  install?: (context: PluginContext) => void;\n  /** 卸载方法 */\n  uninstall?: (context: PluginContext) => void;\n}\n\n/**\n * 插件上下文\n */\nexport interface PluginContext {\n  /** 进度条实例 */\n  instance?: any;\n  /** 配置选项 */\n  options?: Partial<BaseProgressOptions>;\n  /** 共享数据 */\n  data?: Map<string, any>;\n}\n\n/**\n * 插件管理器\n */\nexport class PluginManager {\n  private plugins: Map<string, Plugin> = new Map();\n  private installedPlugins: Set<string> = new Set();\n  private context: PluginContext = {\n    data: new Map(),\n  };\n\n  /**\n   * 注册插件\n   */\n  register(plugin: Plugin): void {\n    if (this.plugins.has(plugin.name)) {\n      console.warn(`Plugin \"${plugin.name}\" is already registered.`);\n      return;\n    }\n\n    this.plugins.set(plugin.name, plugin);\n  }\n\n  /**\n   * 安装插件\n   */\n  install(pluginName: string, instance?: any, options?: Partial<BaseProgressOptions>): void {\n    const plugin = this.plugins.get(pluginName);\n    if (!plugin) {\n      console.error(`Plugin \"${pluginName}\" not found.`);\n      return;\n    }\n\n    if (this.installedPlugins.has(pluginName)) {\n      console.warn(`Plugin \"${pluginName}\" is already installed.`);\n      return;\n    }\n\n    this.context.instance = instance;\n    this.context.options = options;\n\n    if (plugin.install) {\n      plugin.install(this.context);\n    }\n\n    this.installedPlugins.add(pluginName);\n  }\n\n  /**\n   * 卸载插件\n   */\n  uninstall(pluginName: string): void {\n    const plugin = this.plugins.get(pluginName);\n    if (!plugin) {\n      console.error(`Plugin \"${pluginName}\" not found.`);\n      return;\n    }\n\n    if (!this.installedPlugins.has(pluginName)) {\n      console.warn(`Plugin \"${pluginName}\" is not installed.`);\n      return;\n    }\n\n    if (plugin.uninstall) {\n      plugin.uninstall(this.context);\n    }\n\n    this.installedPlugins.delete(pluginName);\n  }\n\n  /**\n   * 检查插件是否已安装\n   */\n  isInstalled(pluginName: string): boolean {\n    return this.installedPlugins.has(pluginName);\n  }\n\n  /**\n   * 获取所有已注册插件\n   */\n  getRegisteredPlugins(): string[] {\n    return Array.from(this.plugins.keys());\n  }\n\n  /**\n   * 获取所有已安装插件\n   */\n  getInstalledPlugins(): string[] {\n    return Array.from(this.installedPlugins);\n  }\n\n  /**\n   * 获取插件\n   */\n  getPlugin(pluginName: string): Plugin | undefined {\n    return this.plugins.get(pluginName);\n  }\n\n  /**\n   * 调用钩子\n   */\n  callHook<K extends keyof PluginHooks>(\n    hookName: K,\n    ...args: Parameters<NonNullable<PluginHooks[K]>>\n  ): any {\n    const results: any[] = [];\n\n    for (const pluginName of this.installedPlugins) {\n      const plugin = this.plugins.get(pluginName);\n      if (plugin?.hooks?.[hookName]) {\n        try {\n          const hook = plugin.hooks[hookName] as any;\n          const result = hook(...args);\n          if (result !== undefined) {\n            results.push(result);\n          }\n        } catch (error) {\n          console.error(`Error calling hook \"${hookName}\" in plugin \"${pluginName}\":`, error);\n        }\n      }\n    }\n\n    // 返回最后一个有效结果，用于钩子链\n    return results.length > 0 ? results[results.length - 1] : args[args.length - 1];\n  }\n\n  /**\n   * 设置上下文数据\n   */\n  setContextData(key: string, value: any): void {\n    this.context.data?.set(key, value);\n  }\n\n  /**\n   * 获取上下文数据\n   */\n  getContextData(key: string): any {\n    return this.context.data?.get(key);\n  }\n\n  /**\n   * 清空所有插件\n   */\n  clear(): void {\n    // 卸载所有已安装插件\n    const installed = Array.from(this.installedPlugins);\n    installed.forEach(name => this.uninstall(name));\n\n    this.plugins.clear();\n    this.installedPlugins.clear();\n    this.context.data?.clear();\n  }\n}\n\n/**\n * 中间件函数类型\n */\nexport type Middleware<T = any> = (\n  value: T,\n  next: (value: T) => T\n) => T;\n\n/**\n * 中间件管理器\n */\nexport class MiddlewareManager<T = any> {\n  private middlewares: Middleware<T>[] = [];\n\n  /**\n   * 添加中间件\n   */\n  use(middleware: Middleware<T>): void {\n    this.middlewares.push(middleware);\n  }\n\n  /**\n   * 移除中间件\n   */\n  remove(middleware: Middleware<T>): void {\n    const index = this.middlewares.indexOf(middleware);\n    if (index > -1) {\n      this.middlewares.splice(index, 1);\n    }\n  }\n\n  /**\n   * 执行中间件链\n   */\n  execute(initialValue: T): T {\n    if (this.middlewares.length === 0) {\n      return initialValue;\n    }\n\n    let index = 0;\n\n    const next = (value: T): T => {\n      if (index >= this.middlewares.length) {\n        return value;\n      }\n\n      const middleware = this.middlewares[index++];\n      return middleware(value, next);\n    };\n\n    return next(initialValue);\n  }\n\n  /**\n   * 清空所有中间件\n   */\n  clear(): void {\n    this.middlewares = [];\n  }\n\n  /**\n   * 获取中间件数量\n   */\n  size(): number {\n    return this.middlewares.length;\n  }\n}\n\n// 内置插件示例\n\n/**\n * 日志插件 - 记录所有生命周期事件\n */\nexport const LoggerPlugin: Plugin = {\n  name: 'logger',\n  version: '1.0.0',\n  description: 'Logs all lifecycle events',\n  hooks: {\n    beforeInit: (options) => {\n      console.log('[Logger] beforeInit:', options);\n    },\n    afterInit: (instance) => {\n      console.log('[Logger] afterInit:', instance);\n    },\n    beforeValueChange: (oldValue, newValue) => {\n      console.log('[Logger] beforeValueChange:', oldValue, '->', newValue);\n    },\n    afterValueChange: (value) => {\n      console.log('[Logger] afterValueChange:', value);\n    },\n    beforeDestroy: (instance) => {\n      console.log('[Logger] beforeDestroy:', instance);\n    },\n  },\n};\n\n/**\n * 性能监控插件 - 监控渲染性能\n */\nexport const PerformancePlugin: Plugin = {\n  name: 'performance',\n  version: '1.0.0',\n  description: 'Monitors rendering performance',\n  install: (context) => {\n    context.data?.set('performance:renderTimes', []);\n  },\n  hooks: {\n    beforeRender: () => {\n      performance.mark('render-start');\n    },\n    afterRender: (instance) => {\n      performance.mark('render-end');\n      performance.measure('render', 'render-start', 'render-end');\n\n      const measure = performance.getEntriesByName('render', 'measure')[0];\n      const renderTimes = instance.pluginManager?.getContextData('performance:renderTimes') || [];\n      renderTimes.push(measure.duration);\n\n      console.log('[Performance] Render time:', measure.duration.toFixed(2), 'ms');\n\n      performance.clearMarks();\n      performance.clearMeasures();\n    },\n  },\n};\n\n/**\n * 自动保存插件 - 自动保存进度状态\n */\nexport const AutoSavePlugin: Plugin = {\n  name: 'autoSave',\n  version: '1.0.0',\n  description: 'Automatically saves progress state',\n  hooks: {\n    afterValueChange: (value) => {\n      // 保存到 localStorage\n      if (typeof localStorage !== 'undefined') {\n        localStorage.setItem('progress:lastValue', String(value));\n        localStorage.setItem('progress:lastUpdate', String(Date.now()));\n      }\n    },\n  },\n};\n\n// 导出单例\nexport const pluginManager = new PluginManager();\n\n\n\n\n"],"names":[],"mappings":"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"}