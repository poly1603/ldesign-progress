{"version":3,"file":"SemiCircleProgress.js","sources":["../../src/components/SemiCircleProgress.ts"],"sourcesContent":["import { SemiCircleProgressOptions } from '../types';\r\nimport { CircleProgress } from './CircleProgress';\r\nimport { createSVGElement, degToRad } from '../utils';\r\n\r\n/**\r\n * 半圆进度条\r\n */\r\nexport class SemiCircleProgress extends CircleProgress {\r\n  private scaleElements: SVGElement[] = [];\r\n\r\n  protected getDefaultOptions(): Partial<SemiCircleProgressOptions> {\r\n    return {\r\n      ...super.getDefaultOptions(),\r\n      angleRange: 180,\r\n      showScale: false,\r\n      scaleCount: 10,\r\n      startAngle: -180,\r\n    };\r\n  }\r\n\r\n  protected render(): void {\r\n    // 调用父类渲染\r\n    super.render();\r\n\r\n    // 调整SVG视图框以适应半圆\r\n    const angleRange = this.config.get('angleRange') ?? 180;\r\n    if (angleRange <= 180) {\r\n      const strokeWidth = this.config.get('strokeWidth') ?? 6;\r\n      const size = (this.radius + strokeWidth) * 2;\r\n      const height = size / 2 + strokeWidth * 2;\r\n      \r\n      this.svg.setAttribute('viewBox', `0 ${size / 2 - strokeWidth} ${size} ${height}`);\r\n      this.svg.setAttribute('height', `${height}`);\r\n    }\r\n\r\n    // 更新周长计算\r\n    const angleRad = degToRad(angleRange);\r\n    this.circumference = this.radius * angleRad;\r\n    this.progressCircle.setAttribute('stroke-dasharray', `${this.circumference} ${2 * Math.PI * this.radius}`);\r\n\r\n    // 添加刻度\r\n    if (this.config.get('showScale')) {\r\n      this.renderScale();\r\n    }\r\n\r\n    // 重新更新进度\r\n    this.updateProgress(this.currentValue);\r\n  }\r\n\r\n  protected renderScale(): void {\r\n    const scaleCount = this.config.get('scaleCount') ?? 10;\r\n    const angleRange = this.config.get('angleRange') ?? 180;\r\n    const startAngle = this.config.get('startAngle') ?? -180;\r\n    const strokeWidth = this.config.get('strokeWidth') ?? 6;\r\n    const center = (this.radius + strokeWidth) * 2 / 2;\r\n\r\n    // 清除旧刻度\r\n    this.scaleElements.forEach(el => el.remove());\r\n    this.scaleElements = [];\r\n\r\n    for (let i = 0; i <= scaleCount; i++) {\r\n      const angle = startAngle + (angleRange / scaleCount) * i;\r\n      const angleRad = degToRad(angle);\r\n      \r\n      const innerRadius = this.radius - strokeWidth / 2 - 5;\r\n      const outerRadius = this.radius - strokeWidth / 2 + 5;\r\n\r\n      const x1 = center + innerRadius * Math.cos(angleRad);\r\n      const y1 = center + innerRadius * Math.sin(angleRad);\r\n      const x2 = center + outerRadius * Math.cos(angleRad);\r\n      const y2 = center + outerRadius * Math.sin(angleRad);\r\n\r\n      const line = createSVGElement('line', {\r\n        x1,\r\n        y1,\r\n        x2,\r\n        y2,\r\n        stroke: '#909399',\r\n        'stroke-width': 1,\r\n        class: 'ld-progress-semicircle__scale',\r\n      });\r\n\r\n      this.svg.appendChild(line);\r\n      this.scaleElements.push(line);\r\n    }\r\n  }\r\n\r\n  protected updateProgress(value: number): void {\r\n    const percentage = this.config.getPercentage(value);\r\n    const angleRange = this.config.get('angleRange') ?? 180;\r\n    \r\n    // 计算偏移量\r\n    const progress = (percentage / 100) * (angleRange / 360);\r\n    const offset = this.circumference - progress * this.circumference * (360 / angleRange);\r\n    \r\n    this.progressCircle.setAttribute('stroke-dashoffset', `${offset}`);\r\n\r\n    // 更新文本\r\n    if (this.textElement) {\r\n      this.textElement.textContent = this.formatText(value);\r\n      \r\n      // 调整文本位置到底部\r\n      this.textElement.style.top = '80%';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置角度范围\r\n   */\r\n  setAngleRange(angleRange: number): void {\r\n    this.config.set('angleRange', angleRange);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * 设置是否显示刻度\r\n   */\r\n  setShowScale(showScale: boolean): void {\r\n    this.config.set('showScale', showScale);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * 设置刻度数量\r\n   */\r\n  setScaleCount(count: number): void {\r\n    this.config.set('scaleCount', count);\r\n    this.render();\r\n  }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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"}