{"version":3,"file":"HeartProgress.js","sources":["../../src/components/HeartProgress.ts"],"sourcesContent":["import { HeartProgressOptions } from '../types';\r\nimport { ProgressBase } from '../base';\r\nimport { createSVGElement } from '../utils';\r\n\r\n/**\r\n * 心形进度条\r\n */\r\nexport class HeartProgress extends ProgressBase<HeartProgressOptions> {\r\n  private svg!: SVGSVGElement;\r\n  private trackPath!: SVGPathElement;\r\n  private progressPath!: SVGPathElement;\r\n  private gradientPath?: SVGPathElement;\r\n  private textElement?: HTMLElement;\r\n  private gradientId?: string;\r\n  private animationId?: number;\r\n\r\n  protected getDefaultOptions(): Partial<HeartProgressOptions> {\r\n    return {\r\n      ...super.getDefaultOptions(),\r\n      heartSize: 100,\r\n      fillMode: 'bottom-up',\r\n      beatAnimation: false,\r\n      beatSpeed: 1000,\r\n    };\r\n  }\r\n\r\n  protected render(): void {\r\n    // 清空容器\r\n    this.container.innerHTML = '';\r\n\r\n    const size = this.config.get('heartSize') ?? 100;\r\n\r\n    // 创建SVG\r\n    this.svg = createSVGElement('svg', {\r\n      width: size,\r\n      height: size,\r\n      viewBox: '0 0 100 100',\r\n      class: 'ld-progress-heart',\r\n    }) as SVGSVGElement;\r\n\r\n    // 添加自定义类名\r\n    const className = this.config.get('className');\r\n    if (className) {\r\n      this.svg.classList.add(className);\r\n    }\r\n\r\n    this.container.appendChild(this.svg);\r\n\r\n    // 心形路径\r\n    const heartPath = 'M50,92 C25,75 8,55 8,40 C8,28 16,20 27,20 C35,20 42,24 50,32 C58,24 65,20 73,20 C84,20 92,28 92,40 C92,55 75,75 50,92 Z';\r\n\r\n    // 创建渐变定义（如果需要）\r\n    const color = this.config.get('color');\r\n    if (Array.isArray(color) && color.length > 1) {\r\n      this.createGradient(color);\r\n    }\r\n\r\n    // 创建轨道\r\n    this.trackPath = createSVGElement('path', {\r\n      d: heartPath,\r\n      fill: this.config.get('trackColor') || '#ffe6e6',\r\n      stroke: '#ffb3b3',\r\n      'stroke-width': '1',\r\n      class: 'ld-progress-heart__track',\r\n    }) as SVGPathElement;\r\n    this.svg.appendChild(this.trackPath);\r\n\r\n    // 根据填充模式创建进度显示\r\n    const fillMode = this.config.get('fillMode') ?? 'bottom-up';\r\n\r\n    if (fillMode === 'bottom-up') {\r\n      // 底部向上填充模式\r\n      const clipPath = createSVGElement('clipPath', {\r\n        id: `heart-clip-${this.id}`,\r\n      });\r\n      const clipRect = createSVGElement('rect', {\r\n        x: '0',\r\n        y: '100',\r\n        width: '100',\r\n        height: '0',\r\n        class: 'ld-progress-heart__clip-rect',\r\n      });\r\n      clipPath.appendChild(clipRect);\r\n      \r\n      const defs = createSVGElement('defs');\r\n      defs.appendChild(clipPath);\r\n      this.svg.insertBefore(defs, this.trackPath);\r\n\r\n      this.progressPath = createSVGElement('path', {\r\n        d: heartPath,\r\n        fill: this.getHeartColor(),\r\n        'clip-path': `url(#heart-clip-${this.id})`,\r\n        class: 'ld-progress-heart__progress',\r\n      }) as SVGPathElement;\r\n    } else if (fillMode === 'center-out') {\r\n      // 中心向外扩展\r\n      this.progressPath = createSVGElement('path', {\r\n        d: heartPath,\r\n        fill: this.getHeartColor(),\r\n        transform: 'translate(50, 50) scale(0) translate(-50, -50)',\r\n        class: 'ld-progress-heart__progress',\r\n      }) as SVGPathElement;\r\n      this.progressPath.style.transformOrigin = 'center';\r\n      this.progressPath.style.transition = 'transform 0.3s';\r\n    } else {\r\n      // pulse 模式\r\n      this.progressPath = createSVGElement('path', {\r\n        d: heartPath,\r\n        fill: this.getHeartColor(),\r\n        opacity: '0',\r\n        class: 'ld-progress-heart__progress',\r\n      }) as SVGPathElement;\r\n    }\r\n\r\n    this.svg.appendChild(this.progressPath);\r\n\r\n    // 创建文本\r\n    if (this.config.get('showText')) {\r\n      this.textElement = document.createElement('div');\r\n      this.textElement.className = 'ld-progress-heart__text';\r\n      this.textElement.style.position = 'absolute';\r\n      this.textElement.style.top = '50%';\r\n      this.textElement.style.left = '50%';\r\n      this.textElement.style.transform = 'translate(-50%, -50%)';\r\n      this.textElement.style.fontSize = '14px';\r\n      this.textElement.style.fontWeight = 'bold';\r\n      this.textElement.style.color = '#fff';\r\n      this.textElement.style.textShadow = '0 1px 2px rgba(0,0,0,0.3)';\r\n\r\n      this.container.style.position = 'relative';\r\n      this.container.style.display = 'inline-block';\r\n      this.container.appendChild(this.textElement);\r\n    }\r\n\r\n    // 启动心跳动画\r\n    if (this.config.get('beatAnimation')) {\r\n      this.startBeatAnimation();\r\n    }\r\n\r\n    // 更新进度\r\n    this.updateProgress(this.currentValue);\r\n  }\r\n\r\n  protected createGradient(colors: string[]): void {\r\n    this.gradientId = `heart-gradient-${this.id}`;\r\n\r\n    const defs = this.svg.querySelector('defs') || createSVGElement('defs');\r\n    const gradient = createSVGElement('linearGradient', {\r\n      id: this.gradientId,\r\n      x1: '0%',\r\n      y1: '100%',\r\n      x2: '0%',\r\n      y2: '0%',\r\n    }) as SVGLinearGradientElement;\r\n\r\n    colors.forEach((color, index) => {\r\n      const offset = (index / (colors.length - 1)) * 100;\r\n      const stop = createSVGElement('stop', {\r\n        offset: `${offset}%`,\r\n        'stop-color': color,\r\n      });\r\n      gradient.appendChild(stop);\r\n    });\r\n\r\n    defs.appendChild(gradient);\r\n    if (!this.svg.querySelector('defs')) {\r\n      this.svg.insertBefore(defs, this.svg.firstChild);\r\n    }\r\n  }\r\n\r\n  protected getHeartColor(): string {\r\n    const color = this.config.get('color');\r\n    if (this.gradientId) {\r\n      return `url(#${this.gradientId})`;\r\n    } else if (Array.isArray(color)) {\r\n      return color[0];\r\n    } else if (typeof color === 'string') {\r\n      return color;\r\n    }\r\n    return '#ff4757';\r\n  }\r\n\r\n  protected updateProgress(value: number): void {\r\n    if (!this.progressPath) return;\r\n\r\n    const percentage = this.config.getPercentage(value);\r\n    const fillMode = this.config.get('fillMode') ?? 'bottom-up';\r\n\r\n    if (fillMode === 'bottom-up') {\r\n      // 更新裁剪矩形\r\n      const clipRect = this.svg.querySelector('.ld-progress-heart__clip-rect');\r\n      if (clipRect) {\r\n        clipRect.setAttribute('y', `${100 - percentage}`);\r\n        clipRect.setAttribute('height', `${percentage}`);\r\n      }\r\n    } else if (fillMode === 'center-out') {\r\n      // 更新缩放\r\n      const scale = percentage / 100;\r\n      this.progressPath.setAttribute(\r\n        'transform',\r\n        `translate(50, 50) scale(${scale}) translate(-50, -50)`\r\n      );\r\n    } else {\r\n      // pulse 模式\r\n      const opacity = percentage / 100;\r\n      this.progressPath.setAttribute('opacity', `${opacity}`);\r\n    }\r\n\r\n    // 更新文本\r\n    if (this.textElement) {\r\n      this.textElement.textContent = this.formatText(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 启动心跳动画\r\n   */\r\n  private startBeatAnimation(): void {\r\n    this.stopBeatAnimation();\r\n\r\n    const beatSpeed = this.config.get('beatSpeed') ?? 1000;\r\n    let scale = 1;\r\n    let growing = true;\r\n\r\n    const beat = () => {\r\n      if (growing) {\r\n        scale += 0.02;\r\n        if (scale >= 1.1) {\r\n          growing = false;\r\n        }\r\n      } else {\r\n        scale -= 0.02;\r\n        if (scale <= 1) {\r\n          growing = true;\r\n        }\r\n      }\r\n\r\n      this.svg.style.transform = `scale(${scale})`;\r\n      this.svg.style.transformOrigin = 'center';\r\n\r\n      this.animationId = requestAnimationFrame(beat);\r\n    };\r\n\r\n    beat();\r\n  }\r\n\r\n  /**\r\n   * 停止心跳动画\r\n   */\r\n  private stopBeatAnimation(): void {\r\n    if (this.animationId) {\r\n      cancelAnimationFrame(this.animationId);\r\n      this.animationId = undefined;\r\n      this.svg.style.transform = 'scale(1)';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置心跳动画\r\n   */\r\n  setBeatAnimation(enabled: boolean): void {\r\n    this.config.set('beatAnimation', enabled);\r\n    if (enabled) {\r\n      this.startBeatAnimation();\r\n    } else {\r\n      this.stopBeatAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置填充模式\r\n   */\r\n  setFillMode(mode: 'bottom-up' | 'center-out' | 'pulse'): void {\r\n    this.config.set('fillMode', mode);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * 销毁\r\n   */\r\n  destroy(): void {\r\n    this.stopBeatAnimation();\r\n    super.destroy();\r\n  }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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"}