{"version":3,"file":"ProgressSnapshot.js","sources":["../../src/utils/ProgressSnapshot.ts"],"sourcesContent":["/**\n * 进度快照与回放系统\n */\n\nimport { BaseProgressOptions } from '../types';\n\nexport interface SnapshotData {\n  /** 快照 ID */\n  id: string;\n  /** 快照时间戳 */\n  timestamp: number;\n  /** 进度值 */\n  value: number;\n  /** 配置选项 */\n  options: Partial<BaseProgressOptions>;\n  /** 自定义元数据 */\n  metadata?: Record<string, any>;\n}\n\nexport interface PlaybackOptions {\n  /** 播放速度（1 = 正常速度） */\n  speed?: number;\n  /** 是否循环播放 */\n  loop?: boolean;\n  /** 播放完成回调 */\n  onComplete?: () => void;\n  /** 每帧回调 */\n  onFrame?: (snapshot: SnapshotData, index: number) => void;\n}\n\n/**\n * 进度快照管理器\n */\nexport class ProgressSnapshotManager {\n  private snapshots: SnapshotData[] = [];\n  private maxSnapshots: number;\n  private isPlaying: boolean = false;\n  private playbackTimer?: any;\n\n  constructor(maxSnapshots: number = 100) {\n    this.maxSnapshots = maxSnapshots;\n  }\n\n  /**\n   * 创建快照\n   */\n  createSnapshot(\n    value: number,\n    options: Partial<BaseProgressOptions>,\n    metadata?: Record<string, any>\n  ): SnapshotData {\n    const snapshot: SnapshotData = {\n      id: this.generateId(),\n      timestamp: Date.now(),\n      value,\n      options: { ...options },\n      metadata: metadata ? { ...metadata } : undefined,\n    };\n\n    this.snapshots.push(snapshot);\n\n    // 限制快照数量\n    if (this.snapshots.length > this.maxSnapshots) {\n      this.snapshots.shift();\n    }\n\n    return snapshot;\n  }\n\n  /**\n   * 获取指定快照\n   */\n  getSnapshot(id: string): SnapshotData | undefined {\n    return this.snapshots.find(s => s.id === id);\n  }\n\n  /**\n   * 获取所有快照\n   */\n  getAllSnapshots(): SnapshotData[] {\n    return [...this.snapshots];\n  }\n\n  /**\n   * 删除快照\n   */\n  deleteSnapshot(id: string): boolean {\n    const index = this.snapshots.findIndex(s => s.id === id);\n    if (index >= 0) {\n      this.snapshots.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * 清空所有快照\n   */\n  clearSnapshots(): void {\n    this.snapshots = [];\n  }\n\n  /**\n   * 回放快照序列\n   */\n  playback(\n    onApplySnapshot: (snapshot: SnapshotData) => void,\n    options: PlaybackOptions = {}\n  ): void {\n    if (this.isPlaying) {\n      this.stopPlayback();\n    }\n\n    if (this.snapshots.length === 0) {\n      console.warn('No snapshots to playback');\n      return;\n    }\n\n    const {\n      speed = 1,\n      loop = false,\n      onComplete,\n      onFrame,\n    } = options;\n\n    this.isPlaying = true;\n    let currentIndex = 0;\n\n    const playNext = () => {\n      if (!this.isPlaying) return;\n\n      const snapshot = this.snapshots[currentIndex];\n      if (!snapshot) return;\n\n      // 应用快照\n      onApplySnapshot(snapshot);\n\n      // 触发帧回调\n      if (onFrame) {\n        onFrame(snapshot, currentIndex);\n      }\n\n      currentIndex++;\n\n      // 检查是否完成\n      if (currentIndex >= this.snapshots.length) {\n        if (loop) {\n          currentIndex = 0;\n        } else {\n          this.stopPlayback();\n          if (onComplete) {\n            onComplete();\n          }\n          return;\n        }\n      }\n\n      // 计算下一帧的延迟\n      let delay = 100; // 默认延迟\n      if (currentIndex < this.snapshots.length) {\n        const nextSnapshot = this.snapshots[currentIndex];\n        const timeDiff = nextSnapshot.timestamp - snapshot.timestamp;\n        delay = Math.max(10, timeDiff / speed);\n      }\n\n      this.playbackTimer = setTimeout(playNext, delay);\n    };\n\n    playNext();\n  }\n\n  /**\n   * 停止回放\n   */\n  stopPlayback(): void {\n    this.isPlaying = false;\n    if (this.playbackTimer) {\n      clearTimeout(this.playbackTimer);\n      this.playbackTimer = undefined;\n    }\n  }\n\n  /**\n   * 检查是否正在播放\n   */\n  isPlaybackActive(): boolean {\n    return this.isPlaying;\n  }\n\n  /**\n   * 导出快照到 JSON\n   */\n  exportToJSON(): string {\n    return JSON.stringify(this.snapshots, null, 2);\n  }\n\n  /**\n   * 从 JSON 导入快照\n   */\n  importFromJSON(json: string): boolean {\n    try {\n      const data = JSON.parse(json);\n      if (Array.isArray(data)) {\n        this.snapshots = data;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Failed to import snapshots:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 保存到 localStorage\n   */\n  saveToLocalStorage(key: string = 'progress-snapshots'): boolean {\n    try {\n      if (typeof localStorage !== 'undefined') {\n        localStorage.setItem(key, this.exportToJSON());\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Failed to save to localStorage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 从 localStorage 加载\n   */\n  loadFromLocalStorage(key: string = 'progress-snapshots'): boolean {\n    try {\n      if (typeof localStorage !== 'undefined') {\n        const data = localStorage.getItem(key);\n        if (data) {\n          return this.importFromJSON(data);\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('Failed to load from localStorage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 获取快照数量\n   */\n  getSnapshotCount(): number {\n    return this.snapshots.length;\n  }\n\n  /**\n   * 获取快照时间范围\n   */\n  getTimeRange(): { start: number; end: number } | null {\n    if (this.snapshots.length === 0) return null;\n\n    const timestamps = this.snapshots.map(s => s.timestamp);\n    return {\n      start: Math.min(...timestamps),\n      end: Math.max(...timestamps),\n    };\n  }\n\n  /**\n   * 获取快照统计信息\n   */\n  getStatistics(): {\n    count: number;\n    timeRange: { start: number; end: number } | null;\n    avgInterval: number;\n    minValue: number;\n    maxValue: number;\n  } {\n    const count = this.snapshots.length;\n    const timeRange = this.getTimeRange();\n\n    if (count === 0) {\n      return {\n        count: 0,\n        timeRange: null,\n        avgInterval: 0,\n        minValue: 0,\n        maxValue: 0,\n      };\n    }\n\n    const values = this.snapshots.map(s => s.value);\n    const minValue = Math.min(...values);\n    const maxValue = Math.max(...values);\n\n    let avgInterval = 0;\n    if (count > 1 && timeRange) {\n      avgInterval = (timeRange.end - timeRange.start) / (count - 1);\n    }\n\n    return {\n      count,\n      timeRange,\n      avgInterval,\n      minValue,\n      maxValue,\n    };\n  }\n\n  /**\n   * 生成唯一 ID\n   */\n  private generateId(): string {\n    return `snapshot-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\n/**\n * 进度比较器 - 并排对比多个进度条\n */\nexport class ProgressComparator {\n  private progressData: Map<string, number[]> = new Map();\n\n  /**\n   * 添加进度数据\n   */\n  addData(name: string, value: number): void {\n    if (!this.progressData.has(name)) {\n      this.progressData.set(name, []);\n    }\n    this.progressData.get(name)!.push(value);\n  }\n\n  /**\n   * 获取进度数据\n   */\n  getData(name: string): number[] {\n    return this.progressData.get(name) || [];\n  }\n\n  /**\n   * 获取所有进度名称\n   */\n  getNames(): string[] {\n    return Array.from(this.progressData.keys());\n  }\n\n  /**\n   * 比较当前值\n   */\n  compareCurrent(): Map<string, number> {\n    const result = new Map<string, number>();\n    this.progressData.forEach((values, name) => {\n      if (values.length > 0) {\n        result.set(name, values[values.length - 1]);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * 比较平均值\n   */\n  compareAverage(): Map<string, number> {\n    const result = new Map<string, number>();\n    this.progressData.forEach((values, name) => {\n      if (values.length > 0) {\n        const avg = values.reduce((sum, v) => sum + v, 0) / values.length;\n        result.set(name, avg);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * 比较最大值\n   */\n  compareMax(): Map<string, number> {\n    const result = new Map<string, number>();\n    this.progressData.forEach((values, name) => {\n      if (values.length > 0) {\n        result.set(name, Math.max(...values));\n      }\n    });\n    return result;\n  }\n\n  /**\n   * 比较最小值\n   */\n  compareMin(): Map<string, number> {\n    const result = new Map<string, number>();\n    this.progressData.forEach((values, name) => {\n      if (values.length > 0) {\n        result.set(name, Math.min(...values));\n      }\n    });\n    return result;\n  }\n\n  /**\n   * 获取领先者\n   */\n  getLeader(): string | null {\n    let leader: string | null = null;\n    let maxValue = -Infinity;\n\n    this.progressData.forEach((values, name) => {\n      if (values.length > 0) {\n        const currentValue = values[values.length - 1];\n        if (currentValue > maxValue) {\n          maxValue = currentValue;\n          leader = name;\n        }\n      }\n    });\n\n    return leader;\n  }\n\n  /**\n   * 清空数据\n   */\n  clear(): void {\n    this.progressData.clear();\n  }\n\n  /**\n   * 清空特定进度的数据\n   */\n  clearData(name: string): void {\n    this.progressData.delete(name);\n  }\n}\n\n\n\n\n"],"names":[],"mappings":"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"}