{"version":3,"file":"ProgressBase.cjs","sources":["../../src/base/ProgressBase.ts"],"sourcesContent":["import { BaseProgressOptions } from '../types';\nimport {\n  EventEmitter,\n  ConfigManager,\n  AnimationController,\n  themeManager,\n  generateId,\n  PluginManager,\n  MiddlewareManager,\n  memoryMonitor,\n} from '../utils';\n\n/**\n * 进度条基类 - 支持插件和中间件\n */\nexport abstract class ProgressBase<\n  T extends BaseProgressOptions = BaseProgressOptions\n> extends EventEmitter {\n  protected container: HTMLElement;\n  protected config: ConfigManager<T>;\n  protected animator: AnimationController;\n  protected pluginManager: PluginManager;\n  protected valueMiddleware: MiddlewareManager<number>;\n  protected id: string;\n  protected currentValue: number;\n  protected destroyed: boolean = false;\n\n  constructor(container: HTMLElement | string, options?: Partial<T>) {\n    super();\n\n    // 初始化插件管理器和中间件\n    this.pluginManager = new PluginManager();\n    this.valueMiddleware = new MiddlewareManager<number>();\n\n    // 插件钩子：beforeInit\n    let processedOptions = this.pluginManager.callHook('beforeInit', options);\n    if (processedOptions) {\n      options = processedOptions;\n    }\n\n    // 初始化容器\n    if (typeof container === 'string') {\n      const element = document.querySelector(container);\n      if (!element) {\n        throw new Error(`Container element \"${container}\" not found`);\n      }\n      this.container = element as HTMLElement;\n    } else {\n      this.container = container;\n    }\n\n    // 生成唯一ID\n    this.id = generateId();\n    this.container.setAttribute('data-progress-id', this.id);\n\n    // 初始化配置管理器\n    this.config = new ConfigManager<T>(this.getDefaultOptions());\n    if (options) {\n      this.config.setMultiple(options);\n    }\n\n    // 初始化动画控制器\n    this.animator = new AnimationController();\n\n    // 初始化当前值\n    this.currentValue = this.config.get('value') ?? 0;\n\n    // 应用主题\n    const theme = this.config.get('theme');\n    if (theme) {\n      themeManager.applyTheme(this.container, theme);\n    }\n\n    // 设置事件监听\n    this.setupEventListeners();\n\n    // 内存监控\n    memoryMonitor.register(this);\n\n    // 插件钩子：afterInit\n    this.pluginManager.callHook('afterInit', this);\n\n    // 渲染\n    this.render();\n  }\n\n  /**\n   * 获取默认配置\n   */\n  protected getDefaultOptions(): Partial<T> {\n    return {\n      value: 0,\n      min: 0,\n      max: 100,\n      animated: true,\n      duration: 300,\n      easing: 'easeOutQuad',\n      showText: true,\n      format: (value: number) => `${Math.round(value)}%`,\n      theme: 'default',\n      className: '',\n    } as Partial<T>;\n  }\n\n  /**\n   * 设置事件监听器\n   */\n  protected setupEventListeners(): void {\n    const onChange = this.config.get('onChange');\n    const onComplete = this.config.get('onComplete');\n    const onStart = this.config.get('onStart');\n\n    if (onChange) {\n      this.on('change', onChange);\n    }\n    if (onComplete) {\n      this.on('complete', onComplete);\n    }\n    if (onStart) {\n      this.on('start', onStart);\n    }\n  }\n\n  /**\n   * 渲染（抽象方法，由子类实现）\n   */\n  protected abstract render(): void;\n\n  /**\n   * 更新进度值（抽象方法，由子类实现）\n   */\n  protected abstract updateProgress(value: number): void;\n\n  /**\n   * 设置进度值（支持中间件和插件钩子）\n   */\n  setValue(value: number, animated: boolean = this.config.get('animated') ?? true): void {\n    if (this.destroyed) return;\n\n    let normalizedValue = this.config.normalizeValue(value);\n    const oldValue = this.currentValue;\n\n    // 插件钩子：beforeValueChange\n    const hookResult = this.pluginManager.callHook('beforeValueChange', oldValue, normalizedValue);\n    if (typeof hookResult === 'number') {\n      normalizedValue = hookResult;\n    }\n\n    // 中间件处理\n    normalizedValue = this.valueMiddleware.execute(normalizedValue);\n\n    // 再次标准化\n    normalizedValue = this.config.normalizeValue(normalizedValue);\n\n    if (oldValue === normalizedValue) return;\n\n    // 触发开始事件\n    if (oldValue === 0 || oldValue === this.config.get('min')) {\n      this.emit('start');\n    }\n\n    if (animated && this.config.get('duration')! > 0) {\n      this.animateValue(oldValue, normalizedValue);\n    } else {\n      this.currentValue = normalizedValue;\n      this.updateProgress(normalizedValue);\n      this.emit('change', normalizedValue);\n\n      // 插件钩子：afterValueChange\n      this.pluginManager.callHook('afterValueChange', normalizedValue);\n\n      // 检查是否完成\n      if (normalizedValue >= (this.config.get('max') ?? 100)) {\n        this.emit('complete');\n      }\n    }\n  }\n\n  /**\n   * 动画更新值\n   */\n  protected animateValue(from: number, to: number): void {\n    this.animator.start({\n      from,\n      to,\n      duration: this.config.get('duration') ?? 300,\n      easing: this.config.get('easing'),\n      onUpdate: (value) => {\n        this.currentValue = value;\n        this.updateProgress(value);\n        this.emit('update', value);\n      },\n      onComplete: () => {\n        this.emit('change', to);\n\n        // 插件钩子：afterValueChange\n        this.pluginManager.callHook('afterValueChange', to);\n\n        if (to >= (this.config.get('max') ?? 100)) {\n          this.emit('complete');\n        }\n      },\n    });\n  }\n\n  /**\n   * 获取当前值\n   */\n  getValue(): number {\n    return this.currentValue;\n  }\n\n  /**\n   * 获取百分比\n   */\n  getPercentage(): number {\n    return this.config.getPercentage(this.currentValue);\n  }\n\n  /**\n   * 增加值\n   */\n  increment(delta: number = 1): void {\n    this.setValue(this.currentValue + delta);\n  }\n\n  /**\n   * 减少值\n   */\n  decrement(delta: number = 1): void {\n    this.setValue(this.currentValue - delta);\n  }\n\n  /**\n   * 重置\n   */\n  reset(): void {\n    this.setValue(this.config.get('min') ?? 0, false);\n    this.animator.reset();\n  }\n\n  /**\n   * 更新配置\n   */\n  updateOptions(options: Partial<T>): void {\n    this.config.setMultiple(options);\n\n    // 如果主题改变，重新应用\n    if (options.theme) {\n      themeManager.applyTheme(this.container, options.theme);\n    }\n\n    // 重新渲染\n    this.render();\n\n    // 如果值改变，更新进度\n    if (options.value !== undefined) {\n      this.setValue(options.value, false);\n    }\n  }\n\n  /**\n   * 获取配置\n   */\n  getOptions(): T {\n    return this.config.getAll();\n  }\n\n  /**\n   * 格式化显示文本\n   */\n  protected formatText(value: number): string {\n    const formatter = this.config.get('format');\n    if (formatter) {\n      return formatter(this.config.getPercentage(value));\n    }\n    return `${Math.round(this.config.getPercentage(value))}%`;\n  }\n\n  /**\n   * 销毁（完善内存清理）\n   */\n  destroy(): void {\n    if (this.destroyed) return;\n\n    // 插件钩子：beforeDestroy\n    this.pluginManager.callHook('beforeDestroy', this);\n\n    // 停止动画\n    this.animator.stop();\n\n    // 移除所有事件监听\n    this.removeAllListeners();\n\n    // 清空容器\n    this.container.innerHTML = '';\n    this.container.removeAttribute('data-progress-id');\n\n    // 清空中间件\n    this.valueMiddleware.clear();\n\n    // 卸载所有插件\n    this.pluginManager.getInstalledPlugins().forEach(name => {\n      this.pluginManager.uninstall(name);\n    });\n\n    // 内存监控注销\n    memoryMonitor.unregister(this);\n\n    this.destroyed = true;\n    this.emit('destroy');\n\n    // 插件钩子：afterDestroy\n    this.pluginManager.callHook('afterDestroy');\n  }\n\n  /**\n   * 检查是否已销毁\n   */\n  isDestroyed(): boolean {\n    return this.destroyed;\n  }\n\n  /**\n   * 使用插件\n   */\n  usePlugin(pluginName: string): this {\n    this.pluginManager.install(pluginName, this, this.getOptions());\n    return this;\n  }\n\n  /**\n   * 添加值更新中间件\n   */\n  addMiddleware(middleware: (value: number, next: (value: number) => number) => number): this {\n    this.valueMiddleware.use(middleware);\n    return this;\n  }\n\n  /**\n   * 获取插件管理器\n   */\n  getPluginManager(): PluginManager {\n    return this.pluginManager;\n  }\n\n  /**\n   * 获取中间件管理器\n   */\n  getMiddlewareManager(): MiddlewareManager<number> {\n    return this.valueMiddleware;\n  }\n\n  /**\n   * 暂停动画\n   */\n  pause(): void {\n    this.animator.pause();\n  }\n\n  /**\n   * 恢复动画\n   */\n  resume(): void {\n    this.animator.resume();\n  }\n\n  /**\n   * 检查是否正在动画\n   */\n  isAnimating(): boolean {\n    return this.animator.isAnimating();\n  }\n}\n\n\n"],"names":["EventEmitter","PluginManager","MiddlewareManager","generateId","ConfigManager","AnimationController","themeManager","memoryMonitor"],"mappings":";;;;;;;;;;;;;;;;;;;;AAeO,MAAe,qBAEZA,yBAAA,CAAa;AAAA,EAUrB,WAAA,CAAY,WAAiC,OAAA,EAAsB;AACjE,IAAA,KAAA,EAAM;AAHR,IAAA,IAAA,CAAU,SAAA,GAAqB,KAAA;AAM7B,IAAA,IAAA,CAAK,aAAA,GAAgB,IAAIC,0BAAA,EAAc;AACvC,IAAA,IAAA,CAAK,eAAA,GAAkB,IAAIC,8BAAA,EAA0B;AAGrD,IAAA,IAAI,gBAAA,GAAmB,IAAA,CAAK,aAAA,CAAc,QAAA,CAAS,cAAc,OAAO,CAAA;AACxE,IAAA,IAAI,gBAAA,EAAkB;AACpB,MAAA,OAAA,GAAU,gBAAA;AAAA,IACZ;AAGA,IAAA,IAAI,OAAO,cAAc,QAAA,EAAU;AACjC,MAAA,MAAM,OAAA,GAAU,QAAA,CAAS,aAAA,CAAc,SAAS,CAAA;AAChD,MAAA,IAAI,CAAC,OAAA,EAAS;AACZ,QAAA,MAAM,IAAI,KAAA,CAAM,CAAA,mBAAA,EAAsB,SAAS,CAAA,WAAA,CAAa,CAAA;AAAA,MAC9D;AACA,MAAA,IAAA,CAAK,SAAA,GAAY,OAAA;AAAA,IACnB,CAAA,MAAO;AACL,MAAA,IAAA,CAAK,SAAA,GAAY,SAAA;AAAA,IACnB;AAGA,IAAA,IAAA,CAAK,KAAKC,kBAAA,EAAW;AACrB,IAAA,IAAA,CAAK,SAAA,CAAU,YAAA,CAAa,kBAAA,EAAoB,IAAA,CAAK,EAAE,CAAA;AAGvD,IAAA,IAAA,CAAK,MAAA,GAAS,IAAIC,2BAAA,CAAiB,IAAA,CAAK,mBAAmB,CAAA;AAC3D,IAAA,IAAI,OAAA,EAAS;AACX,MAAA,IAAA,CAAK,MAAA,CAAO,YAAY,OAAO,CAAA;AAAA,IACjC;AAGA,IAAA,IAAA,CAAK,QAAA,GAAW,IAAIC,uCAAA,EAAoB;AAGxC,IAAA,IAAA,CAAK,YAAA,GAAe,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,CAAA,IAAK,CAAA;AAGhD,IAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,CAAA;AACrC,IAAA,IAAI,KAAA,EAAO;AACT,MAAAC,yBAAA,CAAa,UAAA,CAAW,IAAA,CAAK,SAAA,EAAW,KAAK,CAAA;AAAA,IAC/C;AAGA,IAAA,IAAA,CAAK,mBAAA,EAAoB;AAGzB,IAAAC,2BAAA,CAAc,SAAS,IAAI,CAAA;AAG3B,IAAA,IAAA,CAAK,aAAA,CAAc,QAAA,CAAS,WAAA,EAAa,IAAI,CAAA;AAG7C,IAAA,IAAA,CAAK,MAAA,EAAO;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKU,iBAAA,GAAgC;AACxC,IAAA,OAAO;AAAA,MACL,KAAA,EAAO,CAAA;AAAA,MACP,GAAA,EAAK,CAAA;AAAA,MACL,GAAA,EAAK,GAAA;AAAA,MACL,QAAA,EAAU,IAAA;AAAA,MACV,QAAA,EAAU,GAAA;AAAA,MACV,MAAA,EAAQ,aAAA;AAAA,MACR,QAAA,EAAU,IAAA;AAAA,MACV,QAAQ,CAAC,KAAA,KAAkB,GAAG,IAAA,CAAK,KAAA,CAAM,KAAK,CAAC,CAAA,CAAA,CAAA;AAAA,MAC/C,KAAA,EAAO,SAAA;AAAA,MACP,SAAA,EAAW;AAAA,KACb;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKU,mBAAA,GAA4B;AACpC,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,UAAU,CAAA;AAC3C,IAAA,MAAM,UAAA,GAAa,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,YAAY,CAAA;AAC/C,IAAA,MAAM,OAAA,GAAU,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,SAAS,CAAA;AAEzC,IAAA,IAAI,QAAA,EAAU;AACZ,MAAA,IAAA,CAAK,EAAA,CAAG,UAAU,QAAQ,CAAA;AAAA,IAC5B;AACA,IAAA,IAAI,UAAA,EAAY;AACd,MAAA,IAAA,CAAK,EAAA,CAAG,YAAY,UAAU,CAAA;AAAA,IAChC;AACA,IAAA,IAAI,OAAA,EAAS;AACX,MAAA,IAAA,CAAK,EAAA,CAAG,SAAS,OAAO,CAAA;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAeA,QAAA,CAAS,OAAe,QAAA,GAAoB,IAAA,CAAK,OAAO,GAAA,CAAI,UAAU,KAAK,IAAA,EAAY;AACrF,IAAA,IAAI,IAAA,CAAK,SAAA;AAAW,MAAA;AAEpB,IAAA,IAAI,eAAA,GAAkB,IAAA,CAAK,MAAA,CAAO,cAAA,CAAe,KAAK,CAAA;AACtD,IAAA,MAAM,WAAW,IAAA,CAAK,YAAA;AAGtB,IAAA,MAAM,aAAa,IAAA,CAAK,aAAA,CAAc,QAAA,CAAS,mBAAA,EAAqB,UAAU,eAAe,CAAA;AAC7F,IAAA,IAAI,OAAO,eAAe,QAAA,EAAU;AAClC,MAAA,eAAA,GAAkB,UAAA;AAAA,IACpB;AAGA,IAAA,eAAA,GAAkB,IAAA,CAAK,eAAA,CAAgB,OAAA,CAAQ,eAAe,CAAA;AAG9D,IAAA,eAAA,GAAkB,IAAA,CAAK,MAAA,CAAO,cAAA,CAAe,eAAe,CAAA;AAE5D,IAAA,IAAI,QAAA,KAAa,eAAA;AAAiB,MAAA;AAGlC,IAAA,IAAI,aAAa,CAAA,IAAK,QAAA,KAAa,KAAK,MAAA,CAAO,GAAA,CAAI,KAAK,CAAA,EAAG;AACzD,MAAA,IAAA,CAAK,KAAK,OAAO,CAAA;AAAA,IACnB;AAEA,IAAA,IAAI,YAAY,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,UAAU,IAAK,CAAA,EAAG;AAChD,MAAA,IAAA,CAAK,YAAA,CAAa,UAAU,eAAe,CAAA;AAAA,IAC7C,CAAA,MAAO;AACL,MAAA,IAAA,CAAK,YAAA,GAAe,eAAA;AACpB,MAAA,IAAA,CAAK,eAAe,eAAe,CAAA;AACnC,MAAA,IAAA,CAAK,IAAA,CAAK,UAAU,eAAe,CAAA;AAGnC,MAAA,IAAA,CAAK,aAAA,CAAc,QAAA,CAAS,kBAAA,EAAoB,eAAe,CAAA;AAG/D,MAAA,IAAI,oBAAoB,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,KAAK,KAAK,GAAA,CAAA,EAAM;AACtD,QAAA,IAAA,CAAK,KAAK,UAAU,CAAA;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKU,YAAA,CAAa,MAAc,EAAA,EAAkB;AACrD,IAAA,IAAA,CAAK,SAAS,KAAA,CAAM;AAAA,MAClB,IAAA;AAAA,MACA,EAAA;AAAA,MACA,QAAA,EAAU,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,UAAU,CAAA,IAAK,GAAA;AAAA,MACzC,MAAA,EAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,QAAQ,CAAA;AAAA,MAChC,QAAA,EAAU,CAAC,KAAA,KAAU;AACnB,QAAA,IAAA,CAAK,YAAA,GAAe,KAAA;AACpB,QAAA,IAAA,CAAK,eAAe,KAAK,CAAA;AACzB,QAAA,IAAA,CAAK,IAAA,CAAK,UAAU,KAAK,CAAA;AAAA,MAC3B,CAAA;AAAA,MACA,YAAY,MAAM;AAChB,QAAA,IAAA,CAAK,IAAA,CAAK,UAAU,EAAE,CAAA;AAGtB,QAAA,IAAA,CAAK,aAAA,CAAc,QAAA,CAAS,kBAAA,EAAoB,EAAE,CAAA;AAElD,QAAA,IAAI,OAAO,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,KAAK,KAAK,GAAA,CAAA,EAAM;AACzC,UAAA,IAAA,CAAK,KAAK,UAAU,CAAA;AAAA,QACtB;AAAA,MACF;AAAA,KACD,CAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,QAAA,GAAmB;AACjB,IAAA,OAAO,IAAA,CAAK,YAAA;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,aAAA,GAAwB;AACtB,IAAA,OAAO,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,IAAA,CAAK,YAAY,CAAA;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA,EAKA,SAAA,CAAU,QAAgB,CAAA,EAAS;AACjC,IAAA,IAAA,CAAK,QAAA,CAAS,IAAA,CAAK,YAAA,GAAe,KAAK,CAAA;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA,EAKA,SAAA,CAAU,QAAgB,CAAA,EAAS;AACjC,IAAA,IAAA,CAAK,QAAA,CAAS,IAAA,CAAK,YAAA,GAAe,KAAK,CAAA;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA,EAKA,KAAA,GAAc;AACZ,IAAA,IAAA,CAAK,SAAS,IAAA,CAAK,MAAA,CAAO,IAAI,KAAK,CAAA,IAAK,GAAG,KAAK,CAAA;AAChD,IAAA,IAAA,CAAK,SAAS,KAAA,EAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,OAAA,EAA2B;AACvC,IAAA,IAAA,CAAK,MAAA,CAAO,YAAY,OAAO,CAAA;AAG/B,IAAA,IAAI,QAAQ,KAAA,EAAO;AACjB,MAAAD,yBAAA,CAAa,UAAA,CAAW,IAAA,CAAK,SAAA,EAAW,OAAA,CAAQ,KAAK,CAAA;AAAA,IACvD;AAGA,IAAA,IAAA,CAAK,MAAA,EAAO;AAGZ,IAAA,IAAI,OAAA,CAAQ,UAAU,MAAA,EAAW;AAC/B,MAAA,IAAA,CAAK,QAAA,CAAS,OAAA,CAAQ,KAAA,EAAO,KAAK,CAAA;AAAA,IACpC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,UAAA,GAAgB;AACd,IAAA,OAAO,IAAA,CAAK,OAAO,MAAA,EAAO;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKU,WAAW,KAAA,EAAuB;AAC1C,IAAA,MAAM,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,QAAQ,CAAA;AAC1C,IAAA,IAAI,SAAA,EAAW;AACb,MAAA,OAAO,SAAA,CAAU,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,KAAK,CAAC,CAAA;AAAA,IACnD;AACA,IAAA,OAAO,CAAA,EAAG,KAAK,KAAA,CAAM,IAAA,CAAK,OAAO,aAAA,CAAc,KAAK,CAAC,CAAC,CAAA,CAAA,CAAA;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAKA,OAAA,GAAgB;AACd,IAAA,IAAI,IAAA,CAAK,SAAA;AAAW,MAAA;AAGpB,IAAA,IAAA,CAAK,aAAA,CAAc,QAAA,CAAS,eAAA,EAAiB,IAAI,CAAA;AAGjD,IAAA,IAAA,CAAK,SAAS,IAAA,EAAK;AAGnB,IAAA,IAAA,CAAK,kBAAA,EAAmB;AAGxB,IAAA,IAAA,CAAK,UAAU,SAAA,GAAY,EAAA;AAC3B,IAAA,IAAA,CAAK,SAAA,CAAU,gBAAgB,kBAAkB,CAAA;AAGjD,IAAA,IAAA,CAAK,gBAAgB,KAAA,EAAM;AAG3B,IAAA,IAAA,CAAK,aAAA,CAAc,mBAAA,EAAoB,CAAE,OAAA,CAAQ,CAAA,IAAA,KAAQ;AACvD,MAAA,IAAA,CAAK,aAAA,CAAc,UAAU,IAAI,CAAA;AAAA,IACnC,CAAC,CAAA;AAGD,IAAAC,2BAAA,CAAc,WAAW,IAAI,CAAA;AAE7B,IAAA,IAAA,CAAK,SAAA,GAAY,IAAA;AACjB,IAAA,IAAA,CAAK,KAAK,SAAS,CAAA;AAGnB,IAAA,IAAA,CAAK,aAAA,CAAc,SAAS,cAAc,CAAA;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAKA,WAAA,GAAuB;AACrB,IAAA,OAAO,IAAA,CAAK,SAAA;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,UAAA,EAA0B;AAClC,IAAA,IAAA,CAAK,cAAc,OAAA,CAAQ,UAAA,EAAY,IAAA,EAAM,IAAA,CAAK,YAAY,CAAA;AAC9D,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,UAAA,EAA8E;AAC1F,IAAA,IAAA,CAAK,eAAA,CAAgB,IAAI,UAAU,CAAA;AACnC,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAA,GAAkC;AAChC,IAAA,OAAO,IAAA,CAAK,aAAA;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAA,GAAkD;AAChD,IAAA,OAAO,IAAA,CAAK,eAAA;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,KAAA,GAAc;AACZ,IAAA,IAAA,CAAK,SAAS,KAAA,EAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAA,GAAe;AACb,IAAA,IAAA,CAAK,SAAS,MAAA,EAAO;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,WAAA,GAAuB;AACrB,IAAA,OAAO,IAAA,CAAK,SAAS,WAAA,EAAY;AAAA,EACnC;AACF;;;;"}