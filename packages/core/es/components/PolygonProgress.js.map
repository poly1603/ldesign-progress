{"version":3,"file":"PolygonProgress.js","sources":["../../src/components/PolygonProgress.ts"],"sourcesContent":["import { PolygonProgressOptions } from '../types';\r\nimport { ProgressBase } from '../base';\r\nimport { createSVGElement, degToRad } from '../utils';\r\n\r\n/**\r\n * 多边形进度条\r\n */\r\nexport class PolygonProgress extends ProgressBase<PolygonProgressOptions> {\r\n  private svg!: SVGSVGElement;\r\n  private trackPolygon!: SVGPolygonElement;\r\n  private progressPolygon!: SVGPolygonElement;\r\n  private textElement?: HTMLElement;\r\n\r\n  protected getDefaultOptions(): Partial<PolygonProgressOptions> {\r\n    return {\r\n      ...super.getDefaultOptions(),\r\n      sides: 6,\r\n      radius: 60,\r\n      rotation: 0,\r\n      fillMode: 'edge',\r\n    };\r\n  }\r\n\r\n  protected render(): void {\r\n    // 清空容器\r\n    this.container.innerHTML = '';\r\n\r\n    const sides = this.config.get('sides') ?? 6;\r\n    const radius = this.config.get('radius') ?? 60;\r\n    const rotation = this.config.get('rotation') ?? 0;\r\n    const strokeWidth = this.config.get('strokeWidth') ?? 6;\r\n\r\n    const size = (radius + strokeWidth) * 2;\r\n\r\n    // 创建SVG\r\n    this.svg = createSVGElement('svg', {\r\n      width: size,\r\n      height: size,\r\n      viewBox: `0 0 ${size} ${size}`,\r\n      class: 'ld-progress-polygon',\r\n    }) as SVGSVGElement;\r\n\r\n    // 添加自定义类名\r\n    const className = this.config.get('className');\r\n    if (className) {\r\n      this.svg.classList.add(className);\r\n    }\r\n\r\n    this.container.appendChild(this.svg);\r\n\r\n    // 生成多边形的点\r\n    const points = this.generatePolygonPoints(sides, radius, rotation, size / 2);\r\n    const pointsString = points.map(p => `${p.x},${p.y}`).join(' ');\r\n\r\n    // 创建轨道多边形\r\n    this.trackPolygon = createSVGElement('polygon', {\r\n      points: pointsString,\r\n      fill: 'none',\r\n      stroke: this.config.get('trackColor') || '#e4e7ed',\r\n      'stroke-width': strokeWidth,\r\n      class: 'ld-progress-polygon__track',\r\n    }) as SVGPolygonElement;\r\n    this.svg.appendChild(this.trackPolygon);\r\n\r\n    // 创建进度多边形\r\n    this.progressPolygon = createSVGElement('polygon', {\r\n      points: pointsString,\r\n      fill: 'none',\r\n      'stroke-width': strokeWidth,\r\n      'stroke-linecap': 'round',\r\n      'stroke-linejoin': 'round',\r\n      class: 'ld-progress-polygon__progress',\r\n    }) as SVGPolygonElement;\r\n\r\n    // 设置颜色\r\n    const color = this.config.get('color');\r\n    if (Array.isArray(color)) {\r\n      this.progressPolygon.setAttribute('stroke', color[0]);\r\n    } else if (typeof color === 'string') {\r\n      this.progressPolygon.setAttribute('stroke', color);\r\n    } else {\r\n      this.progressPolygon.setAttribute('stroke', '#409eff');\r\n    }\r\n\r\n    // 计算周长\r\n    const perimeter = this.calculatePerimeter(points);\r\n    this.progressPolygon.style.strokeDasharray = `${perimeter}`;\r\n    this.progressPolygon.style.strokeDashoffset = `${perimeter}`;\r\n    this.progressPolygon.style.transition = 'stroke-dashoffset 0.3s';\r\n\r\n    this.svg.appendChild(this.progressPolygon);\r\n\r\n    // 创建文本\r\n    if (this.config.get('showText')) {\r\n      this.textElement = document.createElement('div');\r\n      this.textElement.className = 'ld-progress-polygon__text';\r\n      this.textElement.style.position = 'absolute';\r\n      this.textElement.style.top = '50%';\r\n      this.textElement.style.left = '50%';\r\n      this.textElement.style.transform = 'translate(-50%, -50%)';\r\n      this.textElement.style.fontSize = '18px';\r\n      this.textElement.style.fontWeight = 'bold';\r\n\r\n      this.container.style.position = 'relative';\r\n      this.container.style.display = 'inline-block';\r\n      this.container.appendChild(this.textElement);\r\n    }\r\n\r\n    // 更新进度\r\n    this.updateProgress(this.currentValue);\r\n  }\r\n\r\n  /**\r\n   * 生成多边形的点\r\n   */\r\n  private generatePolygonPoints(\r\n    sides: number,\r\n    radius: number,\r\n    rotation: number,\r\n    center: number\r\n  ): Array<{ x: number; y: number }> {\r\n    const points: Array<{ x: number; y: number }> = [];\r\n    const angleStep = (2 * Math.PI) / sides;\r\n    const rotationRad = degToRad(rotation);\r\n\r\n    for (let i = 0; i < sides; i++) {\r\n      const angle = i * angleStep + rotationRad - Math.PI / 2;\r\n      points.push({\r\n        x: center + radius * Math.cos(angle),\r\n        y: center + radius * Math.sin(angle),\r\n      });\r\n    }\r\n\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * 计算多边形周长\r\n   */\r\n  private calculatePerimeter(points: Array<{ x: number; y: number }>): number {\r\n    let perimeter = 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      const p1 = points[i];\r\n      const p2 = points[(i + 1) % points.length];\r\n      const dx = p2.x - p1.x;\r\n      const dy = p2.y - p1.y;\r\n      perimeter += Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    return perimeter;\r\n  }\r\n\r\n  protected updateProgress(value: number): void {\r\n    if (!this.progressPolygon) return;\r\n\r\n    const percentage = this.config.getPercentage(value);\r\n    const perimeter = parseFloat(this.progressPolygon.style.strokeDasharray);\r\n    const offset = perimeter - (percentage / 100) * perimeter;\r\n\r\n    this.progressPolygon.style.strokeDashoffset = `${offset}`;\r\n\r\n    // 更新文本\r\n    if (this.textElement) {\r\n      this.textElement.textContent = this.formatText(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置边数\r\n   */\r\n  setSides(sides: number): void {\r\n    if (sides < 3) {\r\n      console.warn('PolygonProgress: sides must be at least 3');\r\n      return;\r\n    }\r\n    this.config.set('sides', sides);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * 设置旋转角度\r\n   */\r\n  setRotation(rotation: number): void {\r\n    this.config.set('rotation', rotation);\r\n    this.render();\r\n  }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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"}