{"version":3,"file":"StepProgress.js","sources":["../../src/components/StepProgress.ts"],"sourcesContent":["import { StepProgressOptions, Step } from '../types';\r\nimport { ProgressBase } from '../base';\r\nimport { createElement } from '../utils';\r\n\r\n/**\r\n * 步骤进度条\r\n */\r\nexport class StepProgress extends ProgressBase<StepProgressOptions> {\r\n  private wrapper!: HTMLElement;\r\n  private stepElements: HTMLElement[] = [];\r\n  private lineElements: HTMLElement[] = [];\r\n\r\n  protected getDefaultOptions(): Partial<StepProgressOptions> {\r\n    return {\r\n      ...super.getDefaultOptions(),\r\n      steps: [],\r\n      currentStep: 0,\r\n      layout: 'horizontal',\r\n      showDescription: true,\r\n    };\r\n  }\r\n\r\n  protected render(): void {\r\n    // 清空容器\r\n    this.container.innerHTML = '';\r\n\r\n    // 创建包装器\r\n    const layout = this.config.get('layout') ?? 'horizontal';\r\n    this.wrapper = createElement('div', 'ld-progress-step', this.container);\r\n    this.wrapper.classList.add(`ld-progress-step--${layout}`);\r\n\r\n    // 添加自定义类名\r\n    const className = this.config.get('className');\r\n    if (className) {\r\n      this.wrapper.classList.add(className);\r\n    }\r\n\r\n    // 渲染步骤\r\n    const steps = this.config.get('steps') ?? [];\r\n    this.stepElements = [];\r\n    this.lineElements = [];\r\n\r\n    steps.forEach((step, index) => {\r\n      // 创建步骤项\r\n      const stepItem = createElement('div', 'ld-progress-step__item', this.wrapper);\r\n      \r\n      // 创建步骤头部（图标/数字）\r\n      const stepHead = createElement('div', 'ld-progress-step__head', stepItem);\r\n      const stepIcon = createElement('div', 'ld-progress-step__icon', stepHead);\r\n      \r\n      // 设置图标或数字\r\n      if (step.icon) {\r\n        stepIcon.innerHTML = step.icon;\r\n      } else {\r\n        stepIcon.textContent = `${index + 1}`;\r\n      }\r\n\r\n      // 创建步骤主体\r\n      const stepMain = createElement('div', 'ld-progress-step__main', stepItem);\r\n      \r\n      // 标题\r\n      if (step.title) {\r\n        const stepTitle = createElement('div', 'ld-progress-step__title', stepMain);\r\n        stepTitle.textContent = step.title;\r\n      }\r\n\r\n      // 描述\r\n      if (step.description && this.config.get('showDescription')) {\r\n        const stepDesc = createElement('div', 'ld-progress-step__description', stepMain);\r\n        stepDesc.textContent = step.description;\r\n      }\r\n\r\n      // 设置状态\r\n      const status = step.status || this.getStepStatus(index);\r\n      stepItem.classList.add(`ld-progress-step__item--${status}`);\r\n\r\n      this.stepElements.push(stepItem);\r\n\r\n      // 创建连接线（除了最后一个步骤）\r\n      if (index < steps.length - 1) {\r\n        const line = createElement('div', 'ld-progress-step__line', stepHead);\r\n        line.classList.add(`ld-progress-step__line--${status}`);\r\n        this.lineElements.push(line);\r\n      }\r\n    });\r\n\r\n    // 更新进度\r\n    this.updateProgress(this.currentValue);\r\n  }\r\n\r\n  protected updateProgress(value: number): void {\r\n    const steps = this.config.get('steps') ?? [];\r\n    const currentStep = this.config.get('currentStep') ?? 0;\r\n\r\n    // 更新步骤状态\r\n    this.stepElements.forEach((stepElement, index) => {\r\n      // 移除所有状态类\r\n      stepElement.classList.remove(\r\n        'ld-progress-step__item--completed',\r\n        'ld-progress-step__item--active',\r\n        'ld-progress-step__item--pending',\r\n        'ld-progress-step__item--error'\r\n      );\r\n\r\n      // 添加新状态类\r\n      const step = steps[index];\r\n      const status = step?.status || this.getStepStatus(index);\r\n      stepElement.classList.add(`ld-progress-step__item--${status}`);\r\n    });\r\n\r\n    // 更新连接线状态\r\n    this.lineElements.forEach((line, index) => {\r\n      line.classList.remove(\r\n        'ld-progress-step__line--completed',\r\n        'ld-progress-step__line--active',\r\n        'ld-progress-step__line--pending'\r\n      );\r\n\r\n      const status = index < currentStep ? 'completed' : 'pending';\r\n      line.classList.add(`ld-progress-step__line--${status}`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据当前步骤获取状态\r\n   */\r\n  private getStepStatus(index: number): Step['status'] {\r\n    const currentStep = this.config.get('currentStep') ?? 0;\r\n    \r\n    if (index < currentStep) {\r\n      return 'completed';\r\n    } else if (index === currentStep) {\r\n      return 'active';\r\n    } else {\r\n      return 'pending';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置当前步骤\r\n   */\r\n  setCurrentStep(step: number): void {\r\n    const steps = this.config.get('steps') ?? [];\r\n    const normalizedStep = Math.max(0, Math.min(steps.length - 1, step));\r\n    \r\n    this.config.set('currentStep', normalizedStep);\r\n    this.currentValue = normalizedStep;\r\n    this.updateProgress(normalizedStep);\r\n    this.emit('change', normalizedStep);\r\n\r\n    // 检查是否完成\r\n    if (normalizedStep >= steps.length - 1) {\r\n      this.emit('complete');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 下一步\r\n   */\r\n  next(): void {\r\n    const currentStep = this.config.get('currentStep') ?? 0;\r\n    this.setCurrentStep(currentStep + 1);\r\n  }\r\n\r\n  /**\r\n   * 上一步\r\n   */\r\n  prev(): void {\r\n    const currentStep = this.config.get('currentStep') ?? 0;\r\n    this.setCurrentStep(currentStep - 1);\r\n  }\r\n\r\n  /**\r\n   * 设置步骤状态\r\n   */\r\n  setStepStatus(index: number, status: Step['status']): void {\r\n    const steps = this.config.get('steps') ?? [];\r\n    if (index >= 0 && index < steps.length) {\r\n      steps[index].status = status;\r\n      this.updateProgress(this.currentValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加步骤\r\n   */\r\n  addStep(step: Step): void {\r\n    const steps = this.config.get('steps') ?? [];\r\n    steps.push(step);\r\n    this.config.set('steps', steps);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * 移除步骤\r\n   */\r\n  removeStep(index: number): void {\r\n    const steps = this.config.get('steps') ?? [];\r\n    if (index >= 0 && index < steps.length) {\r\n      steps.splice(index, 1);\r\n      this.config.set('steps', steps);\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置布局\r\n   */\r\n  setLayout(layout: 'horizontal' | 'vertical'): void {\r\n    this.config.set('layout', layout);\r\n    this.render();\r\n  }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAOO,MAAM,qBAAqB,YAAA,CAAkC;AAAA,EAA7D,WAAA,GAAA;AAAA,IAAA,KAAA,CAAA,GAAA,SAAA,CAAA;AAEL,IAAA,IAAA,CAAQ,eAA8B,EAAC;AACvC,IAAA,IAAA,CAAQ,eAA8B,EAAC;AAAA,EAAA;AAAA,EAE7B,iBAAA,GAAkD;AAC1D,IAAA,OAAO;AAAA,MACL,GAAG,MAAM,iBAAA,EAAkB;AAAA,MAC3B,OAAO,EAAC;AAAA,MACR,WAAA,EAAa,CAAA;AAAA,MACb,MAAA,EAAQ,YAAA;AAAA,MACR,eAAA,EAAiB;AAAA,KACnB;AAAA,EACF;AAAA,EAEU,MAAA,GAAe;AAEvB,IAAA,IAAA,CAAK,UAAU,SAAA,GAAY,EAAA;AAG3B,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,QAAQ,CAAA,IAAK,YAAA;AAC5C,IAAA,IAAA,CAAK,OAAA,GAAU,aAAA,CAAc,KAAA,EAAO,kBAAA,EAAoB,KAAK,SAAS,CAAA;AACtE,IAAA,IAAA,CAAK,OAAA,CAAQ,SAAA,CAAU,GAAA,CAAI,CAAA,kBAAA,EAAqB,MAAM,CAAA,CAAE,CAAA;AAGxD,IAAA,MAAM,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,WAAW,CAAA;AAC7C,IAAA,IAAI,SAAA,EAAW;AACb,MAAA,IAAA,CAAK,OAAA,CAAQ,SAAA,CAAU,GAAA,CAAI,SAAS,CAAA;AAAA,IACtC;AAGA,IAAA,MAAM,QAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,KAAK,EAAC;AAC3C,IAAA,IAAA,CAAK,eAAe,EAAC;AACrB,IAAA,IAAA,CAAK,eAAe,EAAC;AAErB,IAAA,KAAA,CAAM,OAAA,CAAQ,CAAC,IAAA,EAAM,KAAA,KAAU;AAE7B,MAAA,MAAM,QAAA,GAAW,aAAA,CAAc,KAAA,EAAO,wBAAA,EAA0B,KAAK,OAAO,CAAA;AAG5E,MAAA,MAAM,QAAA,GAAW,aAAA,CAAc,KAAA,EAAO,wBAAA,EAA0B,QAAQ,CAAA;AACxE,MAAA,MAAM,QAAA,GAAW,aAAA,CAAc,KAAA,EAAO,wBAAA,EAA0B,QAAQ,CAAA;AAGxE,MAAA,IAAI,KAAK,IAAA,EAAM;AACb,QAAA,QAAA,CAAS,YAAY,IAAA,CAAK,IAAA;AAAA,MAC5B,CAAA,MAAO;AACL,QAAA,QAAA,CAAS,WAAA,GAAc,CAAA,EAAG,KAAA,GAAQ,CAAC,CAAA,CAAA;AAAA,MACrC;AAGA,MAAA,MAAM,QAAA,GAAW,aAAA,CAAc,KAAA,EAAO,wBAAA,EAA0B,QAAQ,CAAA;AAGxE,MAAA,IAAI,KAAK,KAAA,EAAO;AACd,QAAA,MAAM,SAAA,GAAY,aAAA,CAAc,KAAA,EAAO,yBAAA,EAA2B,QAAQ,CAAA;AAC1E,QAAA,SAAA,CAAU,cAAc,IAAA,CAAK,KAAA;AAAA,MAC/B;AAGA,MAAA,IAAI,KAAK,WAAA,IAAe,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,iBAAiB,CAAA,EAAG;AAC1D,QAAA,MAAM,QAAA,GAAW,aAAA,CAAc,KAAA,EAAO,+BAAA,EAAiC,QAAQ,CAAA;AAC/E,QAAA,QAAA,CAAS,cAAc,IAAA,CAAK,WAAA;AAAA,MAC9B;AAGA,MAAA,MAAM,MAAA,GAAS,IAAA,CAAK,MAAA,IAAU,IAAA,CAAK,cAAc,KAAK,CAAA;AACtD,MAAA,QAAA,CAAS,SAAA,CAAU,GAAA,CAAI,CAAA,wBAAA,EAA2B,MAAM,CAAA,CAAE,CAAA;AAE1D,MAAA,IAAA,CAAK,YAAA,CAAa,KAAK,QAAQ,CAAA;AAG/B,MAAA,IAAI,KAAA,GAAQ,KAAA,CAAM,MAAA,GAAS,CAAA,EAAG;AAC5B,QAAA,MAAM,IAAA,GAAO,aAAA,CAAc,KAAA,EAAO,wBAAA,EAA0B,QAAQ,CAAA;AACpE,QAAA,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,CAAA,wBAAA,EAA2B,MAAM,CAAA,CAAE,CAAA;AACtD,QAAA,IAAA,CAAK,YAAA,CAAa,KAAK,IAAI,CAAA;AAAA,MAC7B;AAAA,IACF,CAAC,CAAA;AAGD,IAAA,IAAA,CAAK,cAAA,CAAe,KAAK,YAAY,CAAA;AAAA,EACvC;AAAA,EAEU,eAAe,KAAA,EAAqB;AAC5C,IAAA,MAAM,QAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,KAAK,EAAC;AAC3C,IAAA,MAAM,WAAA,GAAc,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,aAAa,CAAA,IAAK,CAAA;AAGtD,IAAA,IAAA,CAAK,YAAA,CAAa,OAAA,CAAQ,CAAC,WAAA,EAAa,KAAA,KAAU;AAEhD,MAAA,WAAA,CAAY,SAAA,CAAU,MAAA;AAAA,QACpB,mCAAA;AAAA,QACA,gCAAA;AAAA,QACA,iCAAA;AAAA,QACA;AAAA,OACF;AAGA,MAAA,MAAM,IAAA,GAAO,MAAM,KAAK,CAAA;AACxB,MAAA,MAAM,MAAA,GAAS,IAAA,EAAM,MAAA,IAAU,IAAA,CAAK,cAAc,KAAK,CAAA;AACvD,MAAA,WAAA,CAAY,SAAA,CAAU,GAAA,CAAI,CAAA,wBAAA,EAA2B,MAAM,CAAA,CAAE,CAAA;AAAA,IAC/D,CAAC,CAAA;AAGD,IAAA,IAAA,CAAK,YAAA,CAAa,OAAA,CAAQ,CAAC,IAAA,EAAM,KAAA,KAAU;AACzC,MAAA,IAAA,CAAK,SAAA,CAAU,MAAA;AAAA,QACb,mCAAA;AAAA,QACA,gCAAA;AAAA,QACA;AAAA,OACF;AAEA,MAAA,MAAM,MAAA,GAAS,KAAA,GAAQ,WAAA,GAAc,WAAA,GAAc,SAAA;AACnD,MAAA,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,CAAA,wBAAA,EAA2B,MAAM,CAAA,CAAE,CAAA;AAAA,IACxD,CAAC,CAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKQ,cAAc,KAAA,EAA+B;AACnD,IAAA,MAAM,WAAA,GAAc,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,aAAa,CAAA,IAAK,CAAA;AAEtD,IAAA,IAAI,QAAQ,WAAA,EAAa;AACvB,MAAA,OAAO,WAAA;AAAA,IACT,CAAA,MAAA,IAAW,UAAU,WAAA,EAAa;AAChC,MAAA,OAAO,QAAA;AAAA,IACT,CAAA,MAAO;AACL,MAAA,OAAO,SAAA;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,IAAA,EAAoB;AACjC,IAAA,MAAM,QAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,KAAK,EAAC;AAC3C,IAAA,MAAM,cAAA,GAAiB,IAAA,CAAK,GAAA,CAAI,CAAA,EAAG,IAAA,CAAK,IAAI,KAAA,CAAM,MAAA,GAAS,CAAA,EAAG,IAAI,CAAC,CAAA;AAEnE,IAAA,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,aAAA,EAAe,cAAc,CAAA;AAC7C,IAAA,IAAA,CAAK,YAAA,GAAe,cAAA;AACpB,IAAA,IAAA,CAAK,eAAe,cAAc,CAAA;AAClC,IAAA,IAAA,CAAK,IAAA,CAAK,UAAU,cAAc,CAAA;AAGlC,IAAA,IAAI,cAAA,IAAkB,KAAA,CAAM,MAAA,GAAS,CAAA,EAAG;AACtC,MAAA,IAAA,CAAK,KAAK,UAAU,CAAA;AAAA,IACtB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAA,GAAa;AACX,IAAA,MAAM,WAAA,GAAc,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,aAAa,CAAA,IAAK,CAAA;AACtD,IAAA,IAAA,CAAK,cAAA,CAAe,cAAc,CAAC,CAAA;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAA,GAAa;AACX,IAAA,MAAM,WAAA,GAAc,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,aAAa,CAAA,IAAK,CAAA;AACtD,IAAA,IAAA,CAAK,cAAA,CAAe,cAAc,CAAC,CAAA;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAA,CAAc,OAAe,MAAA,EAA8B;AACzD,IAAA,MAAM,QAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,KAAK,EAAC;AAC3C,IAAA,IAAI,KAAA,IAAS,CAAA,IAAK,KAAA,GAAQ,KAAA,CAAM,MAAA,EAAQ;AACtC,MAAA,KAAA,CAAM,KAAK,EAAE,MAAA,GAAS,MAAA;AACtB,MAAA,IAAA,CAAK,cAAA,CAAe,KAAK,YAAY,CAAA;AAAA,IACvC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ,IAAA,EAAkB;AACxB,IAAA,MAAM,QAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,KAAK,EAAC;AAC3C,IAAA,KAAA,CAAM,KAAK,IAAI,CAAA;AACf,IAAA,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAA,EAAS,KAAK,CAAA;AAC9B,IAAA,IAAA,CAAK,MAAA,EAAO;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,KAAA,EAAqB;AAC9B,IAAA,MAAM,QAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,KAAK,EAAC;AAC3C,IAAA,IAAI,KAAA,IAAS,CAAA,IAAK,KAAA,GAAQ,KAAA,CAAM,MAAA,EAAQ;AACtC,MAAA,KAAA,CAAM,MAAA,CAAO,OAAO,CAAC,CAAA;AACrB,MAAA,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAA,EAAS,KAAK,CAAA;AAC9B,MAAA,IAAA,CAAK,MAAA,EAAO;AAAA,IACd;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,MAAA,EAAyC;AACjD,IAAA,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,QAAA,EAAU,MAAM,CAAA;AAChC,IAAA,IAAA,CAAK,MAAA,EAAO;AAAA,EACd;AACF;;;;"}