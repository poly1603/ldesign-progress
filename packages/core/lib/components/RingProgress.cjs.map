{"version":3,"file":"RingProgress.cjs","sources":["../../src/components/RingProgress.ts"],"sourcesContent":["import { RingProgressOptions } from '../types';\r\nimport { ProgressBase } from '../base';\r\nimport { createSVGElement } from '../utils';\r\n\r\n/**\r\n * 多环进度条\r\n */\r\nexport class RingProgress extends ProgressBase<RingProgressOptions> {\r\n  private svg!: SVGSVGElement;\r\n  private ringElements: Array<{\r\n    track: SVGCircleElement;\r\n    progress: SVGCircleElement;\r\n    text?: SVGElement;\r\n  }> = [];\r\n\r\n  protected getDefaultOptions(): Partial<RingProgressOptions> {\r\n    return {\r\n      ...super.getDefaultOptions(),\r\n      baseRadius: 80,\r\n      ringGap: 15,\r\n      rings: [],\r\n    };\r\n  }\r\n\r\n  protected render(): void {\r\n    // 清空容器\r\n    this.container.innerHTML = '';\r\n\r\n    const rings = this.config.get('rings') ?? [];\r\n    if (rings.length === 0) {\r\n      console.warn('RingProgress: No rings configured');\r\n      return;\r\n    }\r\n\r\n    const baseRadius = this.config.get('baseRadius') ?? 80;\r\n    const ringGap = this.config.get('ringGap') ?? 15;\r\n    const maxStrokeWidth = Math.max(...rings.map(r => r.strokeWidth || 8));\r\n\r\n    // 计算SVG尺寸\r\n    const maxRadius = baseRadius + (rings.length - 1) * ringGap;\r\n    const size = (maxRadius + maxStrokeWidth) * 2;\r\n\r\n    // 创建SVG\r\n    this.svg = createSVGElement('svg', {\r\n      width: size,\r\n      height: size,\r\n      viewBox: `0 0 ${size} ${size}`,\r\n      class: 'ld-progress-ring',\r\n    }) as SVGSVGElement;\r\n\r\n    // 添加自定义类名\r\n    const className = this.config.get('className');\r\n    if (className) {\r\n      this.svg.classList.add(className);\r\n    }\r\n\r\n    this.container.appendChild(this.svg);\r\n    this.container.style.position = 'relative';\r\n    this.container.style.display = 'inline-block';\r\n\r\n    // 创建各个环\r\n    this.ringElements = [];\r\n    const center = size / 2;\r\n\r\n    rings.forEach((ring, index) => {\r\n      const radius = baseRadius + index * ringGap;\r\n      const strokeWidth = ring.strokeWidth || 8;\r\n      const circumference = 2 * Math.PI * radius;\r\n\r\n      // 创建轨道\r\n      const track = createSVGElement('circle', {\r\n        cx: center,\r\n        cy: center,\r\n        r: radius,\r\n        fill: 'none',\r\n        stroke: '#e4e7ed',\r\n        'stroke-width': strokeWidth,\r\n        class: 'ld-progress-ring__track',\r\n      }) as SVGCircleElement;\r\n\r\n      // 创建进度环\r\n      const progress = createSVGElement('circle', {\r\n        cx: center,\r\n        cy: center,\r\n        r: radius,\r\n        fill: 'none',\r\n        stroke: ring.color || this.getDefaultColor(index),\r\n        'stroke-width': strokeWidth,\r\n        'stroke-linecap': 'round',\r\n        class: 'ld-progress-ring__progress',\r\n      }) as SVGCircleElement;\r\n\r\n      progress.style.strokeDasharray = `${circumference}`;\r\n      progress.style.strokeDashoffset = `${circumference}`;\r\n      progress.style.transform = 'rotate(-90deg)';\r\n      progress.style.transformOrigin = 'center';\r\n      progress.style.transition = 'stroke-dashoffset 0.3s';\r\n\r\n      this.svg.appendChild(track);\r\n      this.svg.appendChild(progress);\r\n\r\n      // 添加标签\r\n      let textElement: SVGElement | undefined;\r\n      if (ring.label) {\r\n        const labelY = center + (index - rings.length / 2 + 0.5) * 20;\r\n        textElement = createSVGElement('text', {\r\n          x: center,\r\n          y: labelY,\r\n          'text-anchor': 'middle',\r\n          fill: '#606266',\r\n          'font-size': '12',\r\n          class: 'ld-progress-ring__label',\r\n        });\r\n        textElement.textContent = ring.label;\r\n        this.svg.appendChild(textElement);\r\n      }\r\n\r\n      this.ringElements.push({ track, progress, text: textElement });\r\n    });\r\n\r\n    // 添加中心文本\r\n    if (this.config.get('showText')) {\r\n      const centerText = document.createElement('div');\r\n      centerText.className = 'ld-progress-ring__text';\r\n      centerText.style.position = 'absolute';\r\n      centerText.style.top = '50%';\r\n      centerText.style.left = '50%';\r\n      centerText.style.transform = 'translate(-50%, -50%)';\r\n      centerText.style.fontSize = '24px';\r\n      centerText.style.fontWeight = 'bold';\r\n      centerText.style.color = '#303133';\r\n      this.container.appendChild(centerText);\r\n    }\r\n\r\n    // 更新进度\r\n    this.updateProgress(this.currentValue);\r\n  }\r\n\r\n  protected updateProgress(value: number): void {\r\n    const rings = this.config.get('rings') ?? [];\r\n\r\n    rings.forEach((ring, index) => {\r\n      if (!this.ringElements[index]) return;\r\n\r\n      const { progress } = this.ringElements[index];\r\n      const radius = parseFloat(progress.getAttribute('r') || '0');\r\n      const circumference = 2 * Math.PI * radius;\r\n\r\n      // 计算这个环的进度\r\n      const ringPercentage = this.config.getPercentage(ring.value);\r\n      const offset = circumference - (ringPercentage / 100) * circumference;\r\n\r\n      progress.style.strokeDashoffset = `${offset}`;\r\n    });\r\n\r\n    // 更新中心文本（显示总体进度）\r\n    const centerText = this.container.querySelector('.ld-progress-ring__text');\r\n    if (centerText) {\r\n      centerText.textContent = this.formatText(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取默认颜色\r\n   */\r\n  private getDefaultColor(index: number): string {\r\n    const colors = ['#409eff', '#67c23a', '#e6a23c', '#f56c6c', '#909399'];\r\n    return colors[index % colors.length];\r\n  }\r\n\r\n  /**\r\n   * 更新某个环的值\r\n   */\r\n  updateRing(index: number, value: number): void {\r\n    const rings = this.config.get('rings') ?? [];\r\n    if (index >= 0 && index < rings.length) {\r\n      rings[index].value = value;\r\n      this.updateProgress(this.currentValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加环\r\n   */\r\n  addRing(ring: { value: number; color?: string; strokeWidth?: number; label?: string }): void {\r\n    const rings = this.config.get('rings') ?? [];\r\n    rings.push(ring);\r\n    this.config.set('rings', rings);\r\n    this.render();\r\n  }\r\n}\r\n\r\n\r\n"],"names":["ProgressBase","createSVGElement"],"mappings":"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"}