{"version":3,"file":"LinearProgress.js","sources":["../../src/components/LinearProgress.ts"],"sourcesContent":["import { LinearProgressOptions } from '../types';\r\nimport { ProgressBase } from '../base';\r\nimport { createElement, toPx, parseGradient } from '../utils';\r\n\r\n/**\r\n * 线性进度条\r\n */\r\nexport class LinearProgress extends ProgressBase<LinearProgressOptions> {\r\n  private wrapper!: HTMLElement;\r\n  private track!: HTMLElement;\r\n  private bar!: HTMLElement;\r\n  private bufferBar?: HTMLElement;\r\n  private textElement?: HTMLElement;\r\n  private segmentBars: HTMLElement[] = [];\r\n\r\n  protected getDefaultOptions(): Partial<LinearProgressOptions> {\r\n    return {\r\n      ...super.getDefaultOptions(),\r\n      direction: 'horizontal',\r\n      strokeWidth: 6,\r\n      buffer: undefined,\r\n      segments: undefined,\r\n      striped: false,\r\n      active: false,\r\n      indeterminate: false,\r\n    };\r\n  }\r\n\r\n  protected render(): void {\r\n    // 清空容器\r\n    this.container.innerHTML = '';\r\n\r\n    // 创建包装器\r\n    this.wrapper = createElement('div', 'ld-progress-linear', this.container);\r\n    const direction = this.config.get('direction') ?? 'horizontal';\r\n    this.wrapper.classList.add(`ld-progress-linear--${direction}`);\r\n\r\n    // 添加自定义类名\r\n    const className = this.config.get('className');\r\n    if (className) {\r\n      this.wrapper.classList.add(className);\r\n    }\r\n\r\n    // 设置尺寸\r\n    const strokeWidth = this.config.get('strokeWidth') ?? 6;\r\n    if (direction === 'horizontal') {\r\n      this.wrapper.style.height = toPx(strokeWidth);\r\n      const width = this.config.get('width');\r\n      if (width) {\r\n        this.wrapper.style.width = toPx(width);\r\n      }\r\n    } else {\r\n      this.wrapper.style.width = toPx(strokeWidth);\r\n      const height = this.config.get('height');\r\n      if (height) {\r\n        this.wrapper.style.height = toPx(height);\r\n      }\r\n    }\r\n\r\n    // 创建轨道\r\n    this.track = createElement('div', 'ld-progress-linear__track', this.wrapper);\r\n    const trackColor = this.config.get('trackColor');\r\n    if (trackColor) {\r\n      this.track.style.backgroundColor = trackColor;\r\n    }\r\n\r\n    // 创建缓冲条\r\n    const buffer = this.config.get('buffer');\r\n    if (buffer !== undefined) {\r\n      this.bufferBar = createElement('div', 'ld-progress-linear__buffer', this.track);\r\n      this.updateBuffer(buffer);\r\n    }\r\n\r\n    // 创建进度条或分段\r\n    const segments = this.config.get('segments');\r\n    if (segments && segments.length > 0) {\r\n      this.renderSegments();\r\n    } else {\r\n      this.bar = createElement('div', 'ld-progress-linear__bar', this.track);\r\n      \r\n      // 设置颜色\r\n      const color = this.config.get('color');\r\n      if (color) {\r\n        this.bar.style.background = parseGradient(color, direction === 'horizontal' ? 'to right' : 'to top');\r\n      }\r\n\r\n      // 添加条纹\r\n      if (this.config.get('striped')) {\r\n        this.bar.classList.add('ld-progress-linear__bar--striped');\r\n      }\r\n\r\n      // 添加动画\r\n      if (this.config.get('active')) {\r\n        this.bar.classList.add('ld-progress-linear__bar--active');\r\n      }\r\n\r\n      // 不确定状态\r\n      if (this.config.get('indeterminate')) {\r\n        this.bar.classList.add('ld-progress-linear__bar--indeterminate');\r\n      }\r\n    }\r\n\r\n    // 创建文本\r\n    if (this.config.get('showText')) {\r\n      const textInside = this.config.get('textInside');\r\n      this.textElement = createElement(\r\n        'div',\r\n        'ld-progress-linear__text',\r\n        textInside ? this.bar || this.wrapper : this.container\r\n      );\r\n      if (textInside) {\r\n        this.textElement.classList.add('ld-progress-linear__text--inside');\r\n      }\r\n    }\r\n\r\n    // 更新进度\r\n    this.updateProgress(this.currentValue);\r\n  }\r\n\r\n  protected renderSegments(): void {\r\n    const segments = this.config.get('segments')!;\r\n    const direction = this.config.get('direction') ?? 'horizontal';\r\n    const gap = this.config.get('gap') ?? 0;\r\n\r\n    this.segmentBars = [];\r\n    let accumulatedValue = 0;\r\n\r\n    segments.forEach((segment, index) => {\r\n      const segmentBar = createElement('div', 'ld-progress-linear__segment', this.track);\r\n      \r\n      // 设置颜色\r\n      if (segment.color) {\r\n        segmentBar.style.backgroundColor = segment.color;\r\n      }\r\n\r\n      // 计算位置和大小\r\n      const percentage = (segment.value / (this.config.get('max') ?? 100)) * 100;\r\n      \r\n      if (direction === 'horizontal') {\r\n        segmentBar.style.left = `${accumulatedValue}%`;\r\n        segmentBar.style.width = `calc(${percentage}% - ${gap}px)`;\r\n      } else {\r\n        segmentBar.style.bottom = `${accumulatedValue}%`;\r\n        segmentBar.style.height = `calc(${percentage}% - ${gap}px)`;\r\n      }\r\n\r\n      accumulatedValue += percentage;\r\n      this.segmentBars.push(segmentBar);\r\n\r\n      // 添加标签\r\n      if (segment.label) {\r\n        const label = createElement('span', 'ld-progress-linear__segment-label', segmentBar);\r\n        label.textContent = segment.label;\r\n      }\r\n    });\r\n  }\r\n\r\n  protected updateProgress(value: number): void {\r\n    const percentage = this.config.getPercentage(value);\r\n    const direction = this.config.get('direction') ?? 'horizontal';\r\n\r\n    // 更新进度条\r\n    if (this.bar && !this.config.get('indeterminate')) {\r\n      if (direction === 'horizontal') {\r\n        this.bar.style.width = `${percentage}%`;\r\n      } else {\r\n        this.bar.style.height = `${percentage}%`;\r\n      }\r\n    }\r\n\r\n    // 更新文本\r\n    if (this.textElement) {\r\n      this.textElement.textContent = this.formatText(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新缓冲进度\r\n   */\r\n  updateBuffer(buffer: number): void {\r\n    if (!this.bufferBar) return;\r\n\r\n    const percentage = this.config.getPercentage(buffer);\r\n    const direction = this.config.get('direction') ?? 'horizontal';\r\n\r\n    if (direction === 'horizontal') {\r\n      this.bufferBar.style.width = `${percentage}%`;\r\n    } else {\r\n      this.bufferBar.style.height = `${percentage}%`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置缓冲值\r\n   */\r\n  setBuffer(buffer: number): void {\r\n    this.config.set('buffer', buffer);\r\n    this.updateBuffer(buffer);\r\n  }\r\n\r\n  /**\r\n   * 设置方向\r\n   */\r\n  setDirection(direction: 'horizontal' | 'vertical'): void {\r\n    this.config.set('direction', direction);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * 设置条纹\r\n   */\r\n  setStriped(striped: boolean): void {\r\n    this.config.set('striped', striped);\r\n    if (this.bar) {\r\n      this.bar.classList.toggle('ld-progress-linear__bar--striped', striped);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置激活动画\r\n   */\r\n  setActive(active: boolean): void {\r\n    this.config.set('active', active);\r\n    if (this.bar) {\r\n      this.bar.classList.toggle('ld-progress-linear__bar--active', active);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置不确定状态\r\n   */\r\n  setIndeterminate(indeterminate: boolean): void {\r\n    this.config.set('indeterminate', indeterminate);\r\n    if (this.bar) {\r\n      this.bar.classList.toggle('ld-progress-linear__bar--indeterminate', indeterminate);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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"}