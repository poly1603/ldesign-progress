{"version":3,"file":"WaveProgress.js","sources":["../../src/components/WaveProgress.ts"],"sourcesContent":["import { WaveProgressOptions } from '../types';\nimport { ProgressBase } from '../base';\nimport {\n  createElement,\n  createSVGElement,\n  toPx,\n  supportsOffscreenCanvas,\n  canvasContextCache,\n} from '../utils';\n\n/**\n * 水波纹进度条\n */\nexport class WaveProgress extends ProgressBase<WaveProgressOptions> {\n  private wrapper!: HTMLElement;\n  private canvas?: HTMLCanvasElement;\n  private offscreenCanvas?: OffscreenCanvas;\n  private svg?: SVGSVGElement;\n  private ctx?: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\n  private textElement?: HTMLElement;\n  private animationId?: string;\n  private waveOffset: number = 0;\n  private useOffscreen: boolean = false;\n\n  protected getDefaultOptions(): Partial<WaveProgressOptions> {\n    return {\n      ...super.getDefaultOptions(),\n      width: 200,\n      height: 200,\n      waveHeight: 10,\n      waveCount: 2,\n      waveSpeed: 0.05,\n      renderMode: 'canvas',\n    };\n  }\n\n  protected render(): void {\n    // 清空容器\n    this.container.innerHTML = '';\n\n    // 创建包装器\n    this.wrapper = createElement('div', 'ld-progress-wave', this.container);\n    this.wrapper.style.position = 'relative';\n    this.wrapper.style.display = 'inline-block';\n\n    // 添加自定义类名\n    const className = this.config.get('className');\n    if (className) {\n      this.wrapper.classList.add(className);\n    }\n\n    // 设置尺寸\n    const width = this.config.get('width') ?? 200;\n    const height = this.config.get('height') ?? 200;\n    this.wrapper.style.width = toPx(width);\n    this.wrapper.style.height = toPx(height);\n    this.wrapper.style.borderRadius = '50%';\n    this.wrapper.style.overflow = 'hidden';\n    this.wrapper.style.backgroundColor = this.config.get('trackColor') || '#e4e7ed';\n\n    // 根据渲染模式创建元素\n    const renderMode = this.config.get('renderMode') ?? 'canvas';\n    if (renderMode === 'canvas') {\n      this.renderCanvas();\n    } else {\n      this.renderSVG();\n    }\n\n    // 创建文本\n    if (this.config.get('showText')) {\n      this.textElement = createElement('div', 'ld-progress-wave__text', this.wrapper);\n      this.textElement.style.position = 'absolute';\n      this.textElement.style.top = '50%';\n      this.textElement.style.left = '50%';\n      this.textElement.style.transform = 'translate(-50%, -50%)';\n      this.textElement.style.zIndex = '10';\n      this.textElement.style.fontWeight = 'bold';\n    }\n\n    // 更新进度\n    this.updateProgress(this.currentValue);\n\n    // 开始动画\n    if (this.config.get('animated')) {\n      this.startWaveAnimation();\n    }\n  }\n\n  protected renderCanvas(): void {\n    const width = this.config.get('width') ?? 200;\n    const height = this.config.get('height') ?? 200;\n    const widthNum = typeof width === 'number' ? width : parseInt(width);\n    const heightNum = typeof height === 'number' ? height : parseInt(height);\n\n    this.canvas = createElement('canvas', 'ld-progress-wave__canvas', this.wrapper) as HTMLCanvasElement;\n    this.canvas.width = widthNum;\n    this.canvas.height = heightNum;\n    this.canvas.style.position = 'absolute';\n    this.canvas.style.top = '0';\n    this.canvas.style.left = '0';\n\n    // 尝试使用 OffscreenCanvas 提升性能\n    this.useOffscreen = supportsOffscreenCanvas();\n    if (this.useOffscreen) {\n      this.offscreenCanvas = new OffscreenCanvas(widthNum, heightNum);\n      this.ctx = this.offscreenCanvas.getContext('2d')!;\n    } else {\n      // 使用缓存的上下文\n      this.ctx = canvasContextCache.get(this.canvas, { alpha: true });\n    }\n  }\n\n  protected renderSVG(): void {\n    const width = this.config.get('width') ?? 200;\n    const height = this.config.get('height') ?? 200;\n\n    this.svg = createSVGElement('svg', {\n      width: typeof width === 'number' ? width : parseInt(width),\n      height: typeof height === 'number' ? height : parseInt(height),\n      class: 'ld-progress-wave__svg',\n    }) as SVGSVGElement;\n\n    this.svg.style.position = 'absolute';\n    this.svg.style.top = '0';\n    this.svg.style.left = '0';\n\n    this.wrapper.appendChild(this.svg);\n  }\n\n  protected updateProgress(value: number): void {\n    const percentage = this.config.getPercentage(value);\n\n    // 更新文本\n    if (this.textElement) {\n      this.textElement.textContent = this.formatText(value);\n    }\n\n    // 如果不是动画模式，立即绘制\n    if (!this.config.get('animated')) {\n      this.drawWave(percentage);\n    }\n  }\n\n  /**\n   * 开始波浪动画 - 使用 RAF 池化系统\n   */\n  private startWaveAnimation(): void {\n    this.stopWaveAnimation();\n\n    // 使用 RAF 控制器注册动画\n    const { rafController } = require('../utils/RAFController');\n    this.animationId = `wave-${this.id}`;\n\n    rafController.register(\n      this.animationId,\n      () => {\n        const percentage = this.config.getPercentage(this.currentValue);\n        this.drawWave(percentage);\n\n        // 更新偏移量\n        const waveSpeed = this.config.get('waveSpeed') ?? 0.05;\n        this.waveOffset += waveSpeed;\n      },\n      0 // 默认优先级\n    );\n  }\n\n  /**\n   * 停止波浪动画\n   */\n  private stopWaveAnimation(): void {\n    if (this.animationId) {\n      const { rafController } = require('../utils/RAFController');\n      rafController.unregister(this.animationId);\n      this.animationId = undefined;\n    }\n  }\n\n  /**\n   * 绘制波浪\n   */\n  private drawWave(percentage: number): void {\n    const renderMode = this.config.get('renderMode') ?? 'canvas';\n\n    if (renderMode === 'canvas' && this.ctx && this.canvas) {\n      this.drawCanvasWave(percentage);\n    } else if (renderMode === 'svg' && this.svg) {\n      this.drawSVGWave(percentage);\n    }\n  }\n\n  /**\n   * Canvas 绘制波浪（优化版，支持 OffscreenCanvas）\n   */\n  private drawCanvasWave(percentage: number): void {\n    if (!this.ctx) return;\n\n    const width = this.canvas?.width ?? (this.offscreenCanvas?.width ?? 200);\n    const height = this.canvas?.height ?? (this.offscreenCanvas?.height ?? 200);\n    const waveHeight = this.config.get('waveHeight') ?? 10;\n    const waveCount = this.config.get('waveCount') ?? 2;\n\n    // 清除画布\n    this.ctx.clearRect(0, 0, width, height);\n\n    // 计算水位高度\n    const waterLevel = height - (height * percentage) / 100;\n\n    // 绘制波浪\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, waterLevel);\n\n    for (let x = 0; x <= width; x++) {\n      const y =\n        waterLevel +\n        Math.sin((x / width) * Math.PI * waveCount + this.waveOffset) * waveHeight;\n      this.ctx.lineTo(x, y);\n    }\n\n    this.ctx.lineTo(width, height);\n    this.ctx.lineTo(0, height);\n    this.ctx.closePath();\n\n    // 填充颜色\n    const color = this.config.get('color');\n    const fillColor = Array.isArray(color) ? color[0] : color || '#409eff';\n    this.ctx.fillStyle = fillColor;\n    this.ctx.fill();\n\n    // 如果使用 OffscreenCanvas，需要传输到主 Canvas\n    if (this.useOffscreen && this.canvas && this.offscreenCanvas) {\n      const ctx2d = this.canvas.getContext('2d');\n      if (ctx2d) {\n        ctx2d.clearRect(0, 0, width, height);\n        ctx2d.drawImage(this.offscreenCanvas as any, 0, 0);\n      }\n    }\n  }\n\n  /**\n   * SVG 绘制波浪\n   */\n  private drawSVGWave(percentage: number): void {\n    if (!this.svg) return;\n\n    const width = typeof this.config.get('width') === 'number'\n      ? this.config.get('width') as number\n      : parseInt(this.config.get('width') as string);\n    const height = typeof this.config.get('height') === 'number'\n      ? this.config.get('height') as number\n      : parseInt(this.config.get('height') as string);\n    const waveHeight = this.config.get('waveHeight') ?? 10;\n    const waveCount = this.config.get('waveCount') ?? 2;\n\n    // 清除旧路径\n    this.svg.innerHTML = '';\n\n    // 计算水位高度\n    const waterLevel = height - (height * percentage) / 100;\n\n    // 创建路径\n    let pathData = `M 0 ${waterLevel}`;\n\n    for (let x = 0; x <= width; x++) {\n      const y =\n        waterLevel +\n        Math.sin((x / width) * Math.PI * waveCount + this.waveOffset) * waveHeight;\n      pathData += ` L ${x} ${y}`;\n    }\n\n    pathData += ` L ${width} ${height} L 0 ${height} Z`;\n\n    // 创建路径元素\n    const path = createSVGElement('path', {\n      d: pathData,\n      class: 'ld-progress-wave__path',\n    });\n\n    // 设置颜色\n    const color = this.config.get('color');\n    const fillColor = Array.isArray(color) ? color[0] : color || '#409eff';\n    path.setAttribute('fill', fillColor);\n\n    this.svg.appendChild(path);\n  }\n\n  /**\n   * 设置波浪高度\n   */\n  setWaveHeight(height: number): void {\n    this.config.set('waveHeight', height);\n  }\n\n  /**\n   * 设置波浪数量\n   */\n  setWaveCount(count: number): void {\n    this.config.set('waveCount', count);\n  }\n\n  /**\n   * 设置波浪速度\n   */\n  setWaveSpeed(speed: number): void {\n    this.config.set('waveSpeed', speed);\n  }\n\n  /**\n   * 销毁\n   */\n  destroy(): void {\n    this.stopWaveAnimation();\n    super.destroy();\n  }\n}\n\n\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAaO,MAAM,qBAAqB,YAAA,CAAkC;AAAA,EAA7D,WAAA,GAAA;AAAA,IAAA,KAAA,CAAA,GAAA,SAAA,CAAA;AAQL,IAAA,IAAA,CAAQ,UAAA,GAAqB,CAAA;AAC7B,IAAA,IAAA,CAAQ,YAAA,GAAwB,KAAA;AAAA,EAAA;AAAA,EAEtB,iBAAA,GAAkD;AAC1D,IAAA,OAAO;AAAA,MACL,GAAG,MAAM,iBAAA,EAAkB;AAAA,MAC3B,KAAA,EAAO,GAAA;AAAA,MACP,MAAA,EAAQ,GAAA;AAAA,MACR,UAAA,EAAY,EAAA;AAAA,MACZ,SAAA,EAAW,CAAA;AAAA,MACX,SAAA,EAAW,IAAA;AAAA,MACX,UAAA,EAAY;AAAA,KACd;AAAA,EACF;AAAA,EAEU,MAAA,GAAe;AAEvB,IAAA,IAAA,CAAK,UAAU,SAAA,GAAY,EAAA;AAG3B,IAAA,IAAA,CAAK,OAAA,GAAU,aAAA,CAAc,KAAA,EAAO,kBAAA,EAAoB,KAAK,SAAS,CAAA;AACtE,IAAA,IAAA,CAAK,OAAA,CAAQ,MAAM,QAAA,GAAW,UAAA;AAC9B,IAAA,IAAA,CAAK,OAAA,CAAQ,MAAM,OAAA,GAAU,cAAA;AAG7B,IAAA,MAAM,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,WAAW,CAAA;AAC7C,IAAA,IAAI,SAAA,EAAW;AACb,MAAA,IAAA,CAAK,OAAA,CAAQ,SAAA,CAAU,GAAA,CAAI,SAAS,CAAA;AAAA,IACtC;AAGA,IAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,CAAA,IAAK,GAAA;AAC1C,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,QAAQ,CAAA,IAAK,GAAA;AAC5C,IAAA,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,KAAA,GAAQ,IAAA,CAAK,KAAK,CAAA;AACrC,IAAA,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,MAAA,GAAS,IAAA,CAAK,MAAM,CAAA;AACvC,IAAA,IAAA,CAAK,OAAA,CAAQ,MAAM,YAAA,GAAe,KAAA;AAClC,IAAA,IAAA,CAAK,OAAA,CAAQ,MAAM,QAAA,GAAW,QAAA;AAC9B,IAAA,IAAA,CAAK,QAAQ,KAAA,CAAM,eAAA,GAAkB,KAAK,MAAA,CAAO,GAAA,CAAI,YAAY,CAAA,IAAK,SAAA;AAGtE,IAAA,MAAM,UAAA,GAAa,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,YAAY,CAAA,IAAK,QAAA;AACpD,IAAA,IAAI,eAAe,QAAA,EAAU;AAC3B,MAAA,IAAA,CAAK,YAAA,EAAa;AAAA,IACpB,CAAA,MAAO;AACL,MAAA,IAAA,CAAK,SAAA,EAAU;AAAA,IACjB;AAGA,IAAA,IAAI,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,UAAU,CAAA,EAAG;AAC/B,MAAA,IAAA,CAAK,WAAA,GAAc,aAAA,CAAc,KAAA,EAAO,wBAAA,EAA0B,KAAK,OAAO,CAAA;AAC9E,MAAA,IAAA,CAAK,WAAA,CAAY,MAAM,QAAA,GAAW,UAAA;AAClC,MAAA,IAAA,CAAK,WAAA,CAAY,MAAM,GAAA,GAAM,KAAA;AAC7B,MAAA,IAAA,CAAK,WAAA,CAAY,MAAM,IAAA,GAAO,KAAA;AAC9B,MAAA,IAAA,CAAK,WAAA,CAAY,MAAM,SAAA,GAAY,uBAAA;AACnC,MAAA,IAAA,CAAK,WAAA,CAAY,MAAM,MAAA,GAAS,IAAA;AAChC,MAAA,IAAA,CAAK,WAAA,CAAY,MAAM,UAAA,GAAa,MAAA;AAAA,IACtC;AAGA,IAAA,IAAA,CAAK,cAAA,CAAe,KAAK,YAAY,CAAA;AAGrC,IAAA,IAAI,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,UAAU,CAAA,EAAG;AAC/B,MAAA,IAAA,CAAK,kBAAA,EAAmB;AAAA,IAC1B;AAAA,EACF;AAAA,EAEU,YAAA,GAAqB;AAC7B,IAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,CAAA,IAAK,GAAA;AAC1C,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,QAAQ,CAAA,IAAK,GAAA;AAC5C,IAAA,MAAM,WAAW,OAAO,KAAA,KAAU,QAAA,GAAW,KAAA,GAAQ,SAAS,KAAK,CAAA;AACnE,IAAA,MAAM,YAAY,OAAO,MAAA,KAAW,QAAA,GAAW,MAAA,GAAS,SAAS,MAAM,CAAA;AAEvE,IAAA,IAAA,CAAK,MAAA,GAAS,aAAA,CAAc,QAAA,EAAU,0BAAA,EAA4B,KAAK,OAAO,CAAA;AAC9E,IAAA,IAAA,CAAK,OAAO,KAAA,GAAQ,QAAA;AACpB,IAAA,IAAA,CAAK,OAAO,MAAA,GAAS,SAAA;AACrB,IAAA,IAAA,CAAK,MAAA,CAAO,MAAM,QAAA,GAAW,UAAA;AAC7B,IAAA,IAAA,CAAK,MAAA,CAAO,MAAM,GAAA,GAAM,GAAA;AACxB,IAAA,IAAA,CAAK,MAAA,CAAO,MAAM,IAAA,GAAO,GAAA;AAGzB,IAAA,IAAA,CAAK,eAAe,uBAAA,EAAwB;AAC5C,IAAA,IAAI,KAAK,YAAA,EAAc;AACrB,MAAA,IAAA,CAAK,eAAA,GAAkB,IAAI,eAAA,CAAgB,QAAA,EAAU,SAAS,CAAA;AAC9D,MAAA,IAAA,CAAK,GAAA,GAAM,IAAA,CAAK,eAAA,CAAgB,UAAA,CAAW,IAAI,CAAA;AAAA,IACjD,CAAA,MAAO;AAEL,MAAA,IAAA,CAAK,GAAA,GAAM,mBAAmB,GAAA,CAAI,IAAA,CAAK,QAAQ,EAAE,KAAA,EAAO,MAAM,CAAA;AAAA,IAChE;AAAA,EACF;AAAA,EAEU,SAAA,GAAkB;AAC1B,IAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,CAAA,IAAK,GAAA;AAC1C,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,QAAQ,CAAA,IAAK,GAAA;AAE5C,IAAA,IAAA,CAAK,GAAA,GAAM,iBAAiB,KAAA,EAAO;AAAA,MACjC,OAAO,OAAO,KAAA,KAAU,QAAA,GAAW,KAAA,GAAQ,SAAS,KAAK,CAAA;AAAA,MACzD,QAAQ,OAAO,MAAA,KAAW,QAAA,GAAW,MAAA,GAAS,SAAS,MAAM,CAAA;AAAA,MAC7D,KAAA,EAAO;AAAA,KACR,CAAA;AAED,IAAA,IAAA,CAAK,GAAA,CAAI,MAAM,QAAA,GAAW,UAAA;AAC1B,IAAA,IAAA,CAAK,GAAA,CAAI,MAAM,GAAA,GAAM,GAAA;AACrB,IAAA,IAAA,CAAK,GAAA,CAAI,MAAM,IAAA,GAAO,GAAA;AAEtB,IAAA,IAAA,CAAK,OAAA,CAAQ,WAAA,CAAY,IAAA,CAAK,GAAG,CAAA;AAAA,EACnC;AAAA,EAEU,eAAe,KAAA,EAAqB;AAC5C,IAAA,MAAM,UAAA,GAAa,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,KAAK,CAAA;AAGlD,IAAA,IAAI,KAAK,WAAA,EAAa;AACpB,MAAA,IAAA,CAAK,WAAA,CAAY,WAAA,GAAc,IAAA,CAAK,UAAA,CAAW,KAAK,CAAA;AAAA,IACtD;AAGA,IAAA,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,UAAU,CAAA,EAAG;AAChC,MAAA,IAAA,CAAK,SAAS,UAAU,CAAA;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,kBAAA,GAA2B;AACjC,IAAA,IAAA,CAAK,iBAAA,EAAkB;AAGvB,IAAA,MAAM,EAAE,aAAA,EAAc,GAAI,OAAA,CAAQ,wBAAwB,CAAA;AAC1D,IAAA,IAAA,CAAK,WAAA,GAAc,CAAA,KAAA,EAAQ,IAAA,CAAK,EAAE,CAAA,CAAA;AAElC,IAAA,aAAA,CAAc,QAAA;AAAA,MACZ,IAAA,CAAK,WAAA;AAAA,MACL,MAAM;AACJ,QAAA,MAAM,UAAA,GAAa,IAAA,CAAK,MAAA,CAAO,aAAA,CAAc,KAAK,YAAY,CAAA;AAC9D,QAAA,IAAA,CAAK,SAAS,UAAU,CAAA;AAGxB,QAAA,MAAM,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,WAAW,CAAA,IAAK,IAAA;AAClD,QAAA,IAAA,CAAK,UAAA,IAAc,SAAA;AAAA,MACrB,CAAA;AAAA,MACA;AAAA;AAAA,KACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,iBAAA,GAA0B;AAChC,IAAA,IAAI,KAAK,WAAA,EAAa;AACpB,MAAA,MAAM,EAAE,aAAA,EAAc,GAAI,OAAA,CAAQ,wBAAwB,CAAA;AAC1D,MAAA,aAAA,CAAc,UAAA,CAAW,KAAK,WAAW,CAAA;AACzC,MAAA,IAAA,CAAK,WAAA,GAAc,MAAA;AAAA,IACrB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,SAAS,UAAA,EAA0B;AACzC,IAAA,MAAM,UAAA,GAAa,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,YAAY,CAAA,IAAK,QAAA;AAEpD,IAAA,IAAI,UAAA,KAAe,QAAA,IAAY,IAAA,CAAK,GAAA,IAAO,KAAK,MAAA,EAAQ;AACtD,MAAA,IAAA,CAAK,eAAe,UAAU,CAAA;AAAA,IAChC,CAAA,MAAA,IAAW,UAAA,KAAe,KAAA,IAAS,IAAA,CAAK,GAAA,EAAK;AAC3C,MAAA,IAAA,CAAK,YAAY,UAAU,CAAA;AAAA,IAC7B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,eAAe,UAAA,EAA0B;AAC/C,IAAA,IAAI,CAAC,IAAA,CAAK,GAAA;AAAK,MAAA;AAEf,IAAA,MAAM,QAAQ,IAAA,CAAK,MAAA,EAAQ,KAAA,KAAU,IAAA,CAAK,iBAAiB,KAAA,IAAS,GAAA,CAAA;AACpE,IAAA,MAAM,SAAS,IAAA,CAAK,MAAA,EAAQ,MAAA,KAAW,IAAA,CAAK,iBAAiB,MAAA,IAAU,GAAA,CAAA;AACvE,IAAA,MAAM,UAAA,GAAa,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,YAAY,CAAA,IAAK,EAAA;AACpD,IAAA,MAAM,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,WAAW,CAAA,IAAK,CAAA;AAGlD,IAAA,IAAA,CAAK,GAAA,CAAI,SAAA,CAAU,CAAA,EAAG,CAAA,EAAG,OAAO,MAAM,CAAA;AAGtC,IAAA,MAAM,UAAA,GAAa,MAAA,GAAU,MAAA,GAAS,UAAA,GAAc,GAAA;AAGpD,IAAA,IAAA,CAAK,IAAI,SAAA,EAAU;AACnB,IAAA,IAAA,CAAK,GAAA,CAAI,MAAA,CAAO,CAAA,EAAG,UAAU,CAAA;AAE7B,IAAA,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,IAAK,KAAA,EAAO,CAAA,EAAA,EAAK;AAC/B,MAAA,MAAM,CAAA,GACJ,UAAA,GACA,IAAA,CAAK,GAAA,CAAK,CAAA,GAAI,KAAA,GAAS,IAAA,CAAK,EAAA,GAAK,SAAA,GAAY,IAAA,CAAK,UAAU,CAAA,GAAI,UAAA;AAClE,MAAA,IAAA,CAAK,GAAA,CAAI,MAAA,CAAO,CAAA,EAAG,CAAC,CAAA;AAAA,IACtB;AAEA,IAAA,IAAA,CAAK,GAAA,CAAI,MAAA,CAAO,KAAA,EAAO,MAAM,CAAA;AAC7B,IAAA,IAAA,CAAK,GAAA,CAAI,MAAA,CAAO,CAAA,EAAG,MAAM,CAAA;AACzB,IAAA,IAAA,CAAK,IAAI,SAAA,EAAU;AAGnB,IAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,CAAA;AACrC,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,KAAK,IAAI,KAAA,CAAM,CAAC,IAAI,KAAA,IAAS,SAAA;AAC7D,IAAA,IAAA,CAAK,IAAI,SAAA,GAAY,SAAA;AACrB,IAAA,IAAA,CAAK,IAAI,IAAA,EAAK;AAGd,IAAA,IAAI,IAAA,CAAK,YAAA,IAAgB,IAAA,CAAK,MAAA,IAAU,KAAK,eAAA,EAAiB;AAC5D,MAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,MAAA,CAAO,UAAA,CAAW,IAAI,CAAA;AACzC,MAAA,IAAI,KAAA,EAAO;AACT,QAAA,KAAA,CAAM,SAAA,CAAU,CAAA,EAAG,CAAA,EAAG,KAAA,EAAO,MAAM,CAAA;AACnC,QAAA,KAAA,CAAM,SAAA,CAAU,IAAA,CAAK,eAAA,EAAwB,CAAA,EAAG,CAAC,CAAA;AAAA,MACnD;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,YAAY,UAAA,EAA0B;AAC5C,IAAA,IAAI,CAAC,IAAA,CAAK,GAAA;AAAK,MAAA;AAEf,IAAA,MAAM,QAAQ,OAAO,IAAA,CAAK,OAAO,GAAA,CAAI,OAAO,MAAM,QAAA,GAC9C,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,CAAA,GACvB,QAAA,CAAS,KAAK,MAAA,CAAO,GAAA,CAAI,OAAO,CAAW,CAAA;AAC/C,IAAA,MAAM,SAAS,OAAO,IAAA,CAAK,OAAO,GAAA,CAAI,QAAQ,MAAM,QAAA,GAChD,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,QAAQ,CAAA,GACxB,QAAA,CAAS,KAAK,MAAA,CAAO,GAAA,CAAI,QAAQ,CAAW,CAAA;AAChD,IAAA,MAAM,UAAA,GAAa,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,YAAY,CAAA,IAAK,EAAA;AACpD,IAAA,MAAM,SAAA,GAAY,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,WAAW,CAAA,IAAK,CAAA;AAGlD,IAAA,IAAA,CAAK,IAAI,SAAA,GAAY,EAAA;AAGrB,IAAA,MAAM,UAAA,GAAa,MAAA,GAAU,MAAA,GAAS,UAAA,GAAc,GAAA;AAGpD,IAAA,IAAI,QAAA,GAAW,OAAO,UAAU,CAAA,CAAA;AAEhC,IAAA,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,IAAK,KAAA,EAAO,CAAA,EAAA,EAAK;AAC/B,MAAA,MAAM,CAAA,GACJ,UAAA,GACA,IAAA,CAAK,GAAA,CAAK,CAAA,GAAI,KAAA,GAAS,IAAA,CAAK,EAAA,GAAK,SAAA,GAAY,IAAA,CAAK,UAAU,CAAA,GAAI,UAAA;AAClE,MAAA,QAAA,IAAY,CAAA,GAAA,EAAM,CAAC,CAAA,CAAA,EAAI,CAAC,CAAA,CAAA;AAAA,IAC1B;AAEA,IAAA,QAAA,IAAY,CAAA,GAAA,EAAM,KAAK,CAAA,CAAA,EAAI,MAAM,QAAQ,MAAM,CAAA,EAAA,CAAA;AAG/C,IAAA,MAAM,IAAA,GAAO,iBAAiB,MAAA,EAAQ;AAAA,MACpC,CAAA,EAAG,QAAA;AAAA,MACH,KAAA,EAAO;AAAA,KACR,CAAA;AAGD,IAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,OAAO,CAAA;AACrC,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,KAAK,IAAI,KAAA,CAAM,CAAC,IAAI,KAAA,IAAS,SAAA;AAC7D,IAAA,IAAA,CAAK,YAAA,CAAa,QAAQ,SAAS,CAAA;AAEnC,IAAA,IAAA,CAAK,GAAA,CAAI,YAAY,IAAI,CAAA;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,MAAA,EAAsB;AAClC,IAAA,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,YAAA,EAAc,MAAM,CAAA;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,KAAA,EAAqB;AAChC,IAAA,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,WAAA,EAAa,KAAK,CAAA;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,KAAA,EAAqB;AAChC,IAAA,IAAA,CAAK,MAAA,CAAO,GAAA,CAAI,WAAA,EAAa,KAAK,CAAA;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAA,GAAgB;AACd,IAAA,IAAA,CAAK,iBAAA,EAAkB;AACvB,IAAA,KAAA,CAAM,OAAA,EAAQ;AAAA,EAChB;AACF;;;;"}